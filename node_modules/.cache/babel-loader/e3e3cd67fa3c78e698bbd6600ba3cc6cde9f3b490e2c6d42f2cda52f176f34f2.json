{"ast":null,"code":"const DATE_UNITS = {\n  day: 86400,\n  hour: 3600,\n  minute: 60,\n  second: 1\n};\n\n// Función que calcula la diferencia en segundos entre dos fechas\nconst getSecondsDiff = timestamp => (Date.now() - timestamp) / 1000;\n\n// Función que decide qué unidad se va a utilizar para expresar la diferencia entre las fechas. Si el número de segundos de diferencia es mayor que 86400 va a expresarlo en días. Si está entre 3600 y 86400 en horas. Entre 60 y 3600 en minutos. Menos de 60 en segundos\n// Una vez decidida la unidad (es lo que hace el if), calcula la cantidad de dicha unidad (ej: si la diferencia en segundos era de 7200 segundos, nos dará 2 horas)\nconst getUnitAndValueDate = secondsElapsed => {\n  for (const [unit, secondsInUnit] of Object.entries(DATE_UNITS)) {\n    if (secondsElapsed >= secondsInUnit || unit === \"second\") {\n      const value = Math.floor(secondsElapsed / secondsInUnit) * -1;\n      return {\n        value,\n        unit\n      };\n    }\n  }\n};\n\n// Dada una fecha, calcula la diferencia entre esa fecha y hoy, decide en qué unidad expresar esa diferencia y devuelve un texto en el idioma del usuario expresando dicha diferencia\nconst getTimeAgo = timestamp => {\n  const rtf = new Intl.RelativeTimeFormat();\n  const secondsElapsed = getSecondsDiff(timestamp);\n  const {\n    value,\n    unit\n  } = getUnitAndValueDate(secondsElapsed);\n  return rtf.format(value, unit);\n};\nexport default getTimeAgo;","map":{"version":3,"names":["DATE_UNITS","day","hour","minute","second","getSecondsDiff","timestamp","Date","now","getUnitAndValueDate","secondsElapsed","unit","secondsInUnit","Object","entries","value","Math","floor","getTimeAgo","rtf","Intl","RelativeTimeFormat","format"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/utils/getTimeAgo.js"],"sourcesContent":["const DATE_UNITS = {\n  day: 86400,\n  hour: 3600,\n  minute: 60,\n  second: 1,\n};\n\n// Función que calcula la diferencia en segundos entre dos fechas\nconst getSecondsDiff = (timestamp) => (Date.now() - timestamp) / 1000;\n\n// Función que decide qué unidad se va a utilizar para expresar la diferencia entre las fechas. Si el número de segundos de diferencia es mayor que 86400 va a expresarlo en días. Si está entre 3600 y 86400 en horas. Entre 60 y 3600 en minutos. Menos de 60 en segundos\n// Una vez decidida la unidad (es lo que hace el if), calcula la cantidad de dicha unidad (ej: si la diferencia en segundos era de 7200 segundos, nos dará 2 horas)\nconst getUnitAndValueDate = (secondsElapsed) => {\n  for (const [unit, secondsInUnit] of Object.entries(DATE_UNITS)) {\n    if (secondsElapsed >= secondsInUnit || unit === \"second\") {\n      const value = Math.floor(secondsElapsed / secondsInUnit) * -1;\n      return { value, unit };\n    }\n  }\n};\n\n// Dada una fecha, calcula la diferencia entre esa fecha y hoy, decide en qué unidad expresar esa diferencia y devuelve un texto en el idioma del usuario expresando dicha diferencia\nconst getTimeAgo = (timestamp) => {\n  const rtf = new Intl.RelativeTimeFormat();\n\n  const secondsElapsed = getSecondsDiff(timestamp);\n  const { value, unit } = getUnitAndValueDate(secondsElapsed);\n  return rtf.format(value, unit);\n};\n\nexport default getTimeAgo;\n"],"mappings":"AAAA,MAAMA,UAAU,GAAG;EACjBC,GAAG,EAAE,KAAK;EACVC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAE,EAAE;EACVC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,MAAMC,cAAc,GAAIC,SAAS,IAAK,CAACC,IAAI,CAACC,GAAG,EAAE,GAAGF,SAAS,IAAI,IAAI;;AAErE;AACA;AACA,MAAMG,mBAAmB,GAAIC,cAAc,IAAK;EAC9C,KAAK,MAAM,CAACC,IAAI,EAAEC,aAAa,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACd,UAAU,CAAC,EAAE;IAC9D,IAAIU,cAAc,IAAIE,aAAa,IAAID,IAAI,KAAK,QAAQ,EAAE;MACxD,MAAMI,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACP,cAAc,GAAGE,aAAa,CAAC,GAAG,CAAC,CAAC;MAC7D,OAAO;QAAEG,KAAK;QAAEJ;MAAK,CAAC;IACxB;EACF;AACF,CAAC;;AAED;AACA,MAAMO,UAAU,GAAIZ,SAAS,IAAK;EAChC,MAAMa,GAAG,GAAG,IAAIC,IAAI,CAACC,kBAAkB,EAAE;EAEzC,MAAMX,cAAc,GAAGL,cAAc,CAACC,SAAS,CAAC;EAChD,MAAM;IAAES,KAAK;IAAEJ;EAAK,CAAC,GAAGF,mBAAmB,CAACC,cAAc,CAAC;EAC3D,OAAOS,GAAG,CAACG,MAAM,CAACP,KAAK,EAAEJ,IAAI,CAAC;AAChC,CAAC;AAED,eAAeO,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}