{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nconst usePostByIdUser = idUser => {\n  _s();\n  const [post, setPost] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [usernamePage, setUsernamePage] = useState(\"\");\n  const [avatarPage, setAvatarPage] = useState(\"\");\n  const {\n    token\n  } = useTokenContext();\n\n  /*   const addVoteToPost = ({ newAvg, voteByLoggedUser }) => {\n    post.voteByLoggedUser = voteByLoggedUser;\n    post.votes = newAvg;\n     setPost({ ...post });\n  }; */\n  // console.log(\"idUser\", idUser);\n  // let usernamePage;\n\n  useEffect(() => {\n    const fetchPostByIdUser = async () => {\n      try {\n        setLoading(true);\n        const res = await fetch(`http://localhost:4000/posts/${idUser}`, {\n          headers: token ? {\n            Authorization: token\n          } : {}\n        });\n        // console.log(\"res\", res);\n        const body = await res.json();\n        console.log(\"body\", body);\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n        setPost(body.data.post);\n        setUsernamePage(body.data.post[0].username);\n        console.log(\"usernamePage\", usernamePage);\n      } catch (error) {\n        console.error(error);\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPostByIdUser();\n  }, [idUser, token, usernamePage]);\n  return {\n    post: post,\n    usernamePage,\n    setUsernamePage,\n    loading,\n    errorMessage /* addVoteToPost: addVoteToPost  */\n  };\n};\n_s(usePostByIdUser, \"drqMpa54sBX0B7npwuaQ9y6rqQI=\", false, function () {\n  return [useTokenContext];\n});\nexport default usePostByIdUser;","map":{"version":3,"names":["useState","useEffect","useTokenContext","usePostByIdUser","idUser","post","setPost","loading","setLoading","errorMessage","setErrorMessage","usernamePage","setUsernamePage","avatarPage","setAvatarPage","token","fetchPostByIdUser","res","fetch","headers","Authorization","body","json","console","log","ok","Error","message","data","username","error"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/hooks/usePostsByIdUser.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\n\nconst usePostByIdUser = (idUser) => {\n  const [post, setPost] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [usernamePage, setUsernamePage] = useState(\"\");\n  const [avatarPage, setAvatarPage] = useState(\"\");\n\n  const { token } = useTokenContext();\n\n  /*   const addVoteToPost = ({ newAvg, voteByLoggedUser }) => {\n    post.voteByLoggedUser = voteByLoggedUser;\n    post.votes = newAvg;\n\n    setPost({ ...post });\n  }; */\n  // console.log(\"idUser\", idUser);\n  // let usernamePage;\n\n  useEffect(() => {\n    const fetchPostByIdUser = async () => {\n      try {\n        setLoading(true);\n        const res = await fetch(`http://localhost:4000/posts/${idUser}`, {\n          headers: token ? { Authorization: token } : {},\n        });\n        // console.log(\"res\", res);\n        const body = await res.json();\n        console.log(\"body\", body);\n\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n        setPost(body.data.post);\n        setUsernamePage(body.data.post[0].username);\n        console.log(\"usernamePage\", usernamePage);\n      } catch (error) {\n        console.error(error);\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPostByIdUser();\n  }, [idUser, token, usernamePage]);\n\n  return {\n    post: post,\n    usernamePage,\n    setUsernamePage,\n    loading,\n    errorMessage /* addVoteToPost: addVoteToPost  */,\n  };\n};\n\nexport default usePostByIdUser;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM;IAAEe;EAAM,CAAC,GAAGb,eAAe,EAAE;;EAEnC;AACF;AACA;AACA;AACA;EAEE;EACA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMe,iBAAiB,GAAG,YAAY;MACpC,IAAI;QACFR,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8Bd,MAAO,EAAC,EAAE;UAC/De,OAAO,EAAEJ,KAAK,GAAG;YAAEK,aAAa,EAAEL;UAAM,CAAC,GAAG,CAAC;QAC/C,CAAC,CAAC;QACF;QACA,MAAMM,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,EAAE;QAC7BC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEH,IAAI,CAAC;QAEzB,IAAI,CAACJ,GAAG,CAACQ,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACL,IAAI,CAACM,OAAO,CAAC;QAC/B;QACArB,OAAO,CAACe,IAAI,CAACO,IAAI,CAACvB,IAAI,CAAC;QACvBO,eAAe,CAACS,IAAI,CAACO,IAAI,CAACvB,IAAI,CAAC,CAAC,CAAC,CAACwB,QAAQ,CAAC;QAC3CN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEb,YAAY,CAAC;MAC3C,CAAC,CAAC,OAAOmB,KAAK,EAAE;QACdP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC;QACpBpB,eAAe,CAACoB,KAAK,CAACH,OAAO,CAAC;MAChC,CAAC,SAAS;QACRnB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDQ,iBAAiB,EAAE;EACrB,CAAC,EAAE,CAACZ,MAAM,EAAEW,KAAK,EAAEJ,YAAY,CAAC,CAAC;EAEjC,OAAO;IACLN,IAAI,EAAEA,IAAI;IACVM,YAAY;IACZC,eAAe;IACfL,OAAO;IACPE,YAAY,CAAC;EACf,CAAC;AACH,CAAC;AAAC,GArDIN,eAAe;EAAA,QAODD,eAAe;AAAA;AAgDnC,eAAeC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}