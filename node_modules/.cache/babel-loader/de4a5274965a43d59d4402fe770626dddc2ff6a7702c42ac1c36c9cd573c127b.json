{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/CommentForm/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\nimport { usePostsContext } from \"../../context/PostsContext\";\nimport { Link } from \"react-router-dom\";\nimport PostPhoto from \"../PostPhoto\";\n\n//para renderizarlo tras crearlo  PROBAR ESTOOO\n//necesito ahora setPosts y Posts, primero filter para buscar el post, luego le añado la info para que lo pinte y set para que renderice\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentForm = _ref => {\n  _s();\n  let {\n    idPost,\n    idUser,\n    coments\n  } = _ref;\n  const [text, setText] = useState(\"\");\n  const {\n    token,\n    loggedUser\n  } = useTokenContext();\n  const {\n    setPosts,\n    posts\n  } = usePostsContext();\n  const {\n    username: usernameLogged,\n    avatar: avatarLogged\n  } = loggedUser;\n  console.log(\"posts\", posts);\n\n  // const addComentToPost = ({ id, idUser, text, username, avatar }) => {\n  //   const index = posts.findIndex((post) => post.id === id);\n  //   console.log(\"index\", index);\n  //   posts[index].text = text;\n  //   posts[index].idUser = idUser;\n\n  //   posts[index].username = username;\n  //   posts[index].avatar = avatar;\n  //   setPosts([...posts]);\n  // };\n\n  const addComentToPost = _ref2 => {\n    let {\n      id,\n      idUser,\n      text,\n      username,\n      avatar\n    } = _ref2;\n    setPosts(posts => {\n      return posts.map(post => {\n        if (post.id === id) {\n          console.log(\"id\", id);\n          return {\n            ...post,\n            coments: [...post.coments, {\n              id: post.coments.length + 1,\n              idUser,\n              text,\n              username,\n              avatar\n            }]\n          };\n        } else {\n          return post;\n        }\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"ComentList\",\n      children: coments.map(coment => {\n        const {\n          avatar: avatarComent,\n          id: idComent,\n          username: usernameComent,\n          text: textComent,\n          idUser: idUserComent\n        } = coment;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(PostPhoto, {\n            image: avatarComent,\n            username: usernameComent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: `/posts/${idUserComent}`,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: usernameComent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: textComent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)]\n        }, idComent, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        try {\n          e.preventDefault();\n          const res = await fetch(`http://localhost:4000/posts/${idPost}/coments`, {\n            method: \"POST\",\n            headers: {\n              Authorization: token,\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              text,\n              idUser,\n              idPost\n            })\n          });\n          const body = await res.json();\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n          console.log(\"idPost14\", idPost);\n          addComentToPost({\n            id: idPost,\n            idUser: idUser,\n            text: text,\n            username: usernameLogged,\n            avatar: avatarLogged\n          });\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setText(\"\");\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text\",\n        children: [\"Deja un comentario\", \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"text\",\n        type: \"text\",\n        value: text,\n        required: true,\n        onChange: event => {\n          setText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentForm, \"ax7qL8XN1hp6PF9D0RbfHZFra8U=\", false, function () {\n  return [useTokenContext, usePostsContext];\n});\n_c = CommentForm;\nexport default CommentForm;\nvar _c;\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"names":["useState","useTokenContext","usePostsContext","Link","PostPhoto","CommentForm","idPost","idUser","coments","text","setText","token","loggedUser","setPosts","posts","username","usernameLogged","avatar","avatarLogged","console","log","addComentToPost","id","map","post","length","coment","avatarComent","idComent","usernameComent","textComent","idUserComent","e","preventDefault","res","fetch","method","headers","Authorization","body","JSON","stringify","json","ok","Error","message","error","event","target","value"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/CommentForm/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\nimport { usePostsContext } from \"../../context/PostsContext\";\nimport { Link } from \"react-router-dom\";\nimport PostPhoto from \"../PostPhoto\";\n\n//para renderizarlo tras crearlo  PROBAR ESTOOO\n//necesito ahora setPosts y Posts, primero filter para buscar el post, luego le añado la info para que lo pinte y set para que renderice\n\nconst CommentForm = ({ idPost, idUser, coments }) => {\n  const [text, setText] = useState(\"\");\n  const { token, loggedUser } = useTokenContext();\n  const { setPosts, posts } = usePostsContext();\n\n  const { username: usernameLogged, avatar: avatarLogged } = loggedUser;\n  console.log(\"posts\", posts);\n\n  // const addComentToPost = ({ id, idUser, text, username, avatar }) => {\n  //   const index = posts.findIndex((post) => post.id === id);\n  //   console.log(\"index\", index);\n  //   posts[index].text = text;\n  //   posts[index].idUser = idUser;\n\n  //   posts[index].username = username;\n  //   posts[index].avatar = avatar;\n  //   setPosts([...posts]);\n  // };\n\n  const addComentToPost = ({ id, idUser, text, username, avatar }) => {\n    setPosts((posts) => {\n      return posts.map((post) => {\n        if (post.id === id) {\n          console.log(\"id\", id);\n          return {\n            ...post,\n            coments: [\n              ...post.coments,\n              {\n                id: post.coments.length + 1,\n                idUser,\n                text,\n                username,\n                avatar,\n              },\n            ],\n          };\n        } else {\n          return post;\n        }\n      });\n    });\n  };\n\n  return (\n    <section>\n      <ul className=\"ComentList\">\n        {coments.map((coment) => {\n          const {\n            avatar: avatarComent,\n            id: idComent,\n            username: usernameComent,\n            text: textComent,\n            idUser: idUserComent,\n          } = coment;\n\n          return (\n            <li key={idComent}>\n              <PostPhoto image={avatarComent} username={usernameComent} />\n              <Link to={`/posts/${idUserComent}`}>\n                <h4>{usernameComent}</h4>\n              </Link>\n              <p>{textComent}</p>\n            </li>\n          );\n        })}\n      </ul>\n\n      <form\n        onSubmit={async (e) => {\n          try {\n            e.preventDefault();\n\n            const res = await fetch(\n              `http://localhost:4000/posts/${idPost}/coments`,\n              {\n                method: \"POST\",\n                headers: {\n                  Authorization: token,\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ text, idUser, idPost }),\n              }\n            );\n\n            const body = await res.json();\n\n            if (!res.ok) {\n              throw new Error(body.message);\n            }\n            console.log(\"idPost14\", idPost);\n            addComentToPost({\n              id: idPost,\n              idUser: idUser,\n              text: text,\n              username: usernameLogged,\n              avatar: avatarLogged,\n            });\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setText(\"\");\n          }\n        }}\n      >\n        <label htmlFor=\"text\">\n          Deja un comentario\n          {/* (más adelante ternario con post.comets<0 \"se el primero\") */}:\n        </label>\n        <input\n          id=\"text\"\n          type=\"text\"\n          value={text}\n          required\n          onChange={(event) => {\n            setText(event.target.value);\n          }}\n        />\n\n        <button>Enviar</button>\n      </form>\n    </section>\n  );\n};\n\nexport default CommentForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}