{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\n\n// El hook useLocalStorage va a crear un estado que se va a guardar automáticamente en la key indicada por parámetro\nconst useLocalStorage = (key, defaultValue) => {\n  _s();\n  // Declaramos el valor inicial que va a tener el estado. Si ya hay algo guardado en el localStorage con la key indicada (por ejemplo \"dogFacts\"), va a coger ese valor. Si no hay nada guardado en el localStorage, va a coger el defaultValue (un array vacío por ejemplo)\n  const initialValue = JSON.parse(localStorage.getItem(key)) || defaultValue;\n\n  // Creamos el estado pasándole el valor inicial anterior (o lo que había en el localStorage o el defaultValue)\n  const [data, setData] = useState(initialValue);\n\n  // Cada vez que data cambia, se ejecuta el effect, que guarda en el localStorage el estado (en la key indicada, por ejemplo \"dogFacts\")\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(data));\n  }, [data, key]);\n\n  // Retorna un array con el estado que se guarda automáticamente en el localStorage y la función para cambiarlo\n  return [data, setData];\n};\n_s(useLocalStorage, \"FS4G564HkhuTey7n+etlXNHGFTo=\");\nexport default useLocalStorage;","map":{"version":3,"names":["useEffect","useState","useLocalStorage","key","defaultValue","initialValue","JSON","parse","localStorage","getItem","data","setData","setItem","stringify"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\n// El hook useLocalStorage va a crear un estado que se va a guardar automáticamente en la key indicada por parámetro\nconst useLocalStorage = (key, defaultValue) => {\n  // Declaramos el valor inicial que va a tener el estado. Si ya hay algo guardado en el localStorage con la key indicada (por ejemplo \"dogFacts\"), va a coger ese valor. Si no hay nada guardado en el localStorage, va a coger el defaultValue (un array vacío por ejemplo)\n  const initialValue = JSON.parse(localStorage.getItem(key)) || defaultValue;\n\n  // Creamos el estado pasándole el valor inicial anterior (o lo que había en el localStorage o el defaultValue)\n  const [data, setData] = useState(initialValue);\n\n  // Cada vez que data cambia, se ejecuta el effect, que guarda en el localStorage el estado (en la key indicada, por ejemplo \"dogFacts\")\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(data));\n  }, [data, key]);\n\n  // Retorna un array con el estado que se guarda automáticamente en el localStorage y la función para cambiarlo\n  return [data, setData];\n};\n\nexport default useLocalStorage;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAE3C;AACA,MAAMC,eAAe,GAAG,CAACC,GAAG,EAAEC,YAAY,KAAK;EAAA;EAC7C;EACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACN,GAAG,CAAC,CAAC,IAAIC,YAAY;;EAE1E;EACA,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACI,YAAY,CAAC;;EAE9C;EACAL,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACI,OAAO,CAACT,GAAG,EAAEG,IAAI,CAACO,SAAS,CAACH,IAAI,CAAC,CAAC;EACjD,CAAC,EAAE,CAACA,IAAI,EAAEP,GAAG,CAAC,CAAC;;EAEf;EACA,OAAO,CAACO,IAAI,EAAEC,OAAO,CAAC;AACxB,CAAC;AAAC,GAdIT,eAAe;AAgBrB,eAAeA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}