{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\n// El custom hook usePosts carga los Posts de la API y nos retorna un objeto con los Posts, loading y errorMessage\nconst usePosts = () => {\n  _s();\n  const [posts, setPosts] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const addVoteToPost = _ref => {\n    let {\n      id,\n      newAvg,\n      ratedByMe\n    } = _ref;\n    const index = posts.findIndex(post => post.id === id);\n    posts[index].ratedByMe = ratedByMe;\n    posts[index].rate = newAvg;\n    setPosts([...posts]);\n  };\n  const {\n    token\n  } = useTokenContext();\n\n  // El effect se ejecuta después del primer render\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        // Cuando empezamos a hacer el fetch, cambiamos el estado loading a true\n        setLoading(true);\n\n        // Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(`http://localhost:4000/posts?${searchParams.toString()}`, {\n          headers: token ? {\n            Authorization: token\n          } : {}\n        });\n\n        // Nos traemos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta no viene bien, lanzamos un error con el mensaje que viene de la API\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        // Cargamos los datos de los posts en el estado de posts\n        setPosts(body.data.posts);\n      } catch (error) {\n        // Si salta algún error, metemos el mensaje en el estado errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        // Al finalizar el fetch, cambiamos loading a false\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [searchParams, token]);\n  return {\n    posts: posts,\n    errorMessage,\n    loading,\n    addVoteToPost: addVoteToPost,\n    searchParams,\n    setSearchParams,\n    setPosts\n  };\n};\n_s(usePosts, \"FEq8Hy2ywXDHdTcklYG7WHOpmBI=\", false, function () {\n  return [useSearchParams, useTokenContext];\n});\nexport default usePosts;","map":{"version":3,"names":["useTokenContext","useState","useEffect","useSearchParams","usePosts","posts","setPosts","errorMessage","setErrorMessage","loading","setLoading","searchParams","setSearchParams","addVoteToPost","id","newAvg","ratedByMe","index","findIndex","post","rate","token","fetchPosts","res","fetch","toString","headers","Authorization","body","json","ok","Error","message","data","error"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/hooks/usePosts.js"],"sourcesContent":["import { useTokenContext } from \"../context/TokenContext\";\nimport { useState, useEffect } from \"react\";\n\nimport { useSearchParams } from \"react-router-dom\";\n\n// El custom hook usePosts carga los Posts de la API y nos retorna un objeto con los Posts, loading y errorMessage\nconst usePosts = () => {\n  const [posts, setPosts] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addVoteToPost = ({ id, newAvg, ratedByMe }) => {\n    const index = posts.findIndex((post) => post.id === id);\n\n    posts[index].ratedByMe = ratedByMe;\n    posts[index].rate = newAvg;\n\n    setPosts([...posts]);\n  };\n\n  const { token } = useTokenContext();\n\n  // El effect se ejecuta después del primer render\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        // Cuando empezamos a hacer el fetch, cambiamos el estado loading a true\n        setLoading(true);\n\n        // Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(\n          `http://localhost:4000/posts?${searchParams.toString()}`,\n          {\n            headers: token ? { Authorization: token } : {},\n          }\n        );\n\n        // Nos traemos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta no viene bien, lanzamos un error con el mensaje que viene de la API\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        // Cargamos los datos de los posts en el estado de posts\n        setPosts(body.data.posts);\n      } catch (error) {\n        // Si salta algún error, metemos el mensaje en el estado errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        // Al finalizar el fetch, cambiamos loading a false\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, [searchParams, token]);\n\n  return {\n    posts: posts,\n    errorMessage,\n    loading,\n    addVoteToPost: addVoteToPost,\n    searchParams,\n    setSearchParams,\n    setPosts,\n  };\n};\n\nexport default usePosts;\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,yBAAyB;AACzD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,eAAe,QAAQ,kBAAkB;;AAElD;AACA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGT,eAAe,EAAE;EAEzD,MAAMU,aAAa,GAAG,QAA+B;IAAA,IAA9B;MAAEC,EAAE;MAAEC,MAAM;MAAEC;IAAU,CAAC;IAC9C,MAAMC,KAAK,GAAGZ,KAAK,CAACa,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC;IAEvDT,KAAK,CAACY,KAAK,CAAC,CAACD,SAAS,GAAGA,SAAS;IAClCX,KAAK,CAACY,KAAK,CAAC,CAACG,IAAI,GAAGL,MAAM;IAE1BT,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;EACtB,CAAC;EAED,MAAM;IAAEgB;EAAM,CAAC,GAAGrB,eAAe,EAAE;;EAEnC;EACAE,SAAS,CAAC,MAAM;IACd,MAAMoB,UAAU,GAAG,YAAY;MAC7B,IAAI;QACF;QACAZ,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMa,GAAG,GAAG,MAAMC,KAAK,CACpB,+BAA8Bb,YAAY,CAACc,QAAQ,EAAG,EAAC,EACxD;UACEC,OAAO,EAAEL,KAAK,GAAG;YAAEM,aAAa,EAAEN;UAAM,CAAC,GAAG,CAAC;QAC/C,CAAC,CACF;;QAED;QACA,MAAMO,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;;QAE7B;QACA,IAAI,CAACN,GAAG,CAACO,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;QAC/B;;QAEA;QACA1B,QAAQ,CAACsB,IAAI,CAACK,IAAI,CAAC5B,KAAK,CAAC;MAC3B,CAAC,CAAC,OAAO6B,KAAK,EAAE;QACd;QACA1B,eAAe,CAAC0B,KAAK,CAACF,OAAO,CAAC;MAChC,CAAC,SAAS;QACR;QACAtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDY,UAAU,EAAE;EACd,CAAC,EAAE,CAACX,YAAY,EAAEU,KAAK,CAAC,CAAC;EAEzB,OAAO;IACLhB,KAAK,EAAEA,KAAK;IACZE,YAAY;IACZE,OAAO;IACPI,aAAa,EAAEA,aAAa;IAC5BF,YAAY;IACZC,eAAe;IACfN;EACF,CAAC;AACH,CAAC;AAAC,GA/DIF,QAAQ;EAAA,QAI4BD,eAAe,EAWrCH,eAAe;AAAA;AAkDnC,eAAeI,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}