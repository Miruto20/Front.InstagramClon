{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/CommentForm/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\n//para renderizarlo tras crearlo  PROBAR ESTOOO\n//necesito ahora setPosts y Posts, primero filter para buscar el post, luego le añado la info para que lo pinte y set para que renderice\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentForm = _ref => {\n  _s();\n  let {\n    idPost,\n    idUser,\n    coments\n  } = _ref;\n  const [text, setText] = useState(\"\");\n  const {\n    token,\n    loggedUser\n  } = useTokenContext();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"ComentList\",\n      children: coments.map(coment => {\n        const {\n          avatar: avatarComent,\n          id: idComent,\n          username: usernameComent,\n          text: textComent\n        } = coment;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onClick: async e => {\n        try {\n          e.preventDefault();\n          console.log(\"idPostCommCompo\", idUser);\n          const res = await fetch(`http://localhost:4000/posts/${idPost}/coments`, {\n            method: \"POST\",\n            headers: {\n              Authorization: token,\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              text,\n              idUser,\n              idPost\n            })\n          });\n          const body = await res.json();\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n\n          /*    addCommentToPost({\n          id: idPost,\n          newAvg: body.data.rate,\n          valueRated: currentStar,\n          }); */\n        } catch (error) {\n          console.error(error);\n        } finally {\n          setText(\"\");\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text\",\n        children: [\"Deja un comentario\", \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"text\",\n        type: \"text\",\n        value: text,\n        required: true,\n        onChange: event => {\n          setText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentForm, \"AWoQ3Okfs9gwBNXrMDEyN10d09Q=\", false, function () {\n  return [useTokenContext];\n});\n_c = CommentForm;\nexport default CommentForm;\nvar _c;\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"names":["useState","useTokenContext","CommentForm","idPost","idUser","coments","text","setText","token","loggedUser","map","coment","avatar","avatarComent","id","idComent","username","usernameComent","textComent","e","preventDefault","console","log","res","fetch","method","headers","Authorization","body","JSON","stringify","json","ok","Error","message","error","event","target","value"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/CommentForm/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\n//para renderizarlo tras crearlo  PROBAR ESTOOO\n//necesito ahora setPosts y Posts, primero filter para buscar el post, luego le añado la info para que lo pinte y set para que renderice\n\nconst CommentForm = ({ idPost, idUser, coments }) => {\n  const [text, setText] = useState(\"\");\n  const { token, loggedUser } = useTokenContext();\n\n  return (\n    <section>\n      <ul className=\"ComentList\">\n        {coments.map((coment) => {\n          const {\n            avatar: avatarComent,\n            id: idComent,\n            username: usernameComent,\n            text: textComent,\n          } = coment;\n        })}\n      </ul>\n\n      <form\n        onClick={async (e) => {\n          try {\n            e.preventDefault();\n            console.log(\"idPostCommCompo\", idUser);\n\n            const res = await fetch(\n              `http://localhost:4000/posts/${idPost}/coments`,\n              {\n                method: \"POST\",\n                headers: {\n                  Authorization: token,\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ text, idUser, idPost }),\n              }\n            );\n\n            const body = await res.json();\n\n            if (!res.ok) {\n              throw new Error(body.message);\n            }\n\n            /*    addCommentToPost({\n            id: idPost,\n            newAvg: body.data.rate,\n            valueRated: currentStar,\n          }); */\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setText(\"\");\n          }\n        }}\n      >\n        <label htmlFor=\"text\">\n          Deja un comentario\n          {/* (más adelante ternario con post.comets<0 \"se el primero\") */}:\n        </label>\n        <input\n          id=\"text\"\n          type=\"text\"\n          value={text}\n          required\n          onChange={(event) => {\n            setText(event.target.value);\n          }}\n        />\n\n        <button>Enviar</button>\n      </form>\n    </section>\n  );\n};\n\nexport default CommentForm;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,4BAA4B;AAC5D;AACA;AAAA;AAEA,MAAMC,WAAW,GAAG,QAAiC;EAAA;EAAA,IAAhC;IAAEC,MAAM;IAAEC,MAAM;IAAEC;EAAQ,CAAC;EAC9C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM;IAAEQ,KAAK;IAAEC;EAAW,CAAC,GAAGR,eAAe,EAAE;EAE/C,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,YAAY;MAAA,UACvBI,OAAO,CAACK,GAAG,CAAEC,MAAM,IAAK;QACvB,MAAM;UACJC,MAAM,EAAEC,YAAY;UACpBC,EAAE,EAAEC,QAAQ;UACZC,QAAQ,EAAEC,cAAc;UACxBX,IAAI,EAAEY;QACR,CAAC,GAAGP,MAAM;MACZ,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eAEL;MACE,OAAO,EAAE,MAAOQ,CAAC,IAAK;QACpB,IAAI;UACFA,CAAC,CAACC,cAAc,EAAE;UAClBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAElB,MAAM,CAAC;UAEtC,MAAMmB,GAAG,GAAG,MAAMC,KAAK,CACpB,+BAA8BrB,MAAO,UAAS,EAC/C;YACEsB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACPC,aAAa,EAAEnB,KAAK;cACpB,cAAc,EAAE;YAClB,CAAC;YACDoB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAExB,IAAI;cAAEF,MAAM;cAAED;YAAO,CAAC;UAC/C,CAAC,CACF;UAED,MAAMyB,IAAI,GAAG,MAAML,GAAG,CAACQ,IAAI,EAAE;UAE7B,IAAI,CAACR,GAAG,CAACS,EAAE,EAAE;YACX,MAAM,IAAIC,KAAK,CAACL,IAAI,CAACM,OAAO,CAAC;UAC/B;;UAEA;AACZ;AACA;AACA;AACA;QACU,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdd,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC;QACtB,CAAC,SAAS;UACR5B,OAAO,CAAC,EAAE,CAAC;QACb;MACF,CAAE;MAAA,wBAEF;QAAO,OAAO,EAAC,MAAM;QAAA,WAAC,oBAEpB,EAAiE,GACnE;MAAA;QAAA;QAAA;QAAA;MAAA,QAAQ,eACR;QACE,EAAE,EAAC,MAAM;QACT,IAAI,EAAC,MAAM;QACX,KAAK,EAAED,IAAK;QACZ,QAAQ;QACR,QAAQ,EAAG8B,KAAK,IAAK;UACnB7B,OAAO,CAAC6B,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;QAC7B;MAAE;QAAA;QAAA;QAAA;MAAA,QACF,eAEF;QAAA,UAAQ;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAClB;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GAvEIpC,WAAW;EAAA,QAEeD,eAAe;AAAA;AAAA,KAFzCC,WAAW;AAyEjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}