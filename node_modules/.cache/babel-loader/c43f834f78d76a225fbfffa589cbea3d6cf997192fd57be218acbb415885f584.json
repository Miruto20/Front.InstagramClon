{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/RecoverPasswordPage/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useTokenContext } from \"../../contexts/TokenContext\";\n\n// Página que recoge el recoverPassCode de los parámetros de la url y hace un fetch al back con la nueva contraseña que meta el usuario en el formulario\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RecoverPasswordPage = () => {\n  _s();\n  // Recogemos el recoverPassCode de los parámetros de la url\n  const {\n    recoverPassCode\n  } = useParams();\n  const [password, setPassword] = useState(\"\");\n  const [repeatedPassword, setRepeatedPassword] = useState(\"\");\n  const navigate = useNavigate();\n  const {\n    setToken\n  } = useTokenContext();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recuperaci\\xF3n de contrase\\xF1a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        try {\n          event.preventDefault();\n          if (password !== repeatedPassword) {\n            throw new Error(\"Las contraseñas no coinciden\");\n          }\n          const res = await fetch(\"http://localhost:4000/users/password\", {\n            method: \"PUT\",\n            body: JSON.stringify({\n              recoverPassCode,\n              password,\n              repeatedPassword\n            }),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const body = await res.json();\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n\n          // Si el back no da ningún error, deslogueamos al usuario, le avisamos de que su contraseña ha cambiado y lo redirigimos a login\n          setToken(\"\");\n          toast.success(\"¡Contraseña actualizada con éxito!\");\n          navigate(\"/login\");\n        } catch (error) {\n          console.error(error);\n          toast.error(error.message);\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Nueva contrase\\xF1a:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        value: password,\n        onChange: event => {\n          setPassword(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"repeatedPassword\",\n        children: \"Repetir nueva contrase\\xF1a:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"repeatedPassword\",\n        value: repeatedPassword,\n        onChange: event => {\n          setRepeatedPassword(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Cambiar contrase\\xF1a\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(RecoverPasswordPage, \"w2AY4yH2syga1/m6QaP8GE73UQ0=\", false, function () {\n  return [useParams, useNavigate, useTokenContext];\n});\n_c = RecoverPasswordPage;\nexport default RecoverPasswordPage;\nvar _c;\n$RefreshReg$(_c, \"RecoverPasswordPage\");","map":{"version":3,"names":["useState","useParams","useNavigate","toast","useTokenContext","RecoverPasswordPage","recoverPassCode","password","setPassword","repeatedPassword","setRepeatedPassword","navigate","setToken","event","preventDefault","Error","res","fetch","method","body","JSON","stringify","headers","json","ok","message","success","error","console","target","value"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/RecoverPasswordPage/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { useTokenContext } from \"../../contexts/TokenContext\";\n\n// Página que recoge el recoverPassCode de los parámetros de la url y hace un fetch al back con la nueva contraseña que meta el usuario en el formulario\nconst RecoverPasswordPage = () => {\n  // Recogemos el recoverPassCode de los parámetros de la url\n  const { recoverPassCode } = useParams();\n\n  const [password, setPassword] = useState(\"\");\n  const [repeatedPassword, setRepeatedPassword] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  const { setToken } = useTokenContext();\n\n  return (\n    <section>\n      <h2>Recuperación de contraseña</h2>\n\n      <form\n        onSubmit={async (event) => {\n          try {\n            event.preventDefault();\n\n            if (password !== repeatedPassword) {\n              throw new Error(\"Las contraseñas no coinciden\");\n            }\n\n            const res = await fetch(\"http://localhost:4000/users/password\", {\n              method: \"PUT\",\n              body: JSON.stringify({\n                recoverPassCode,\n                password,\n                repeatedPassword,\n              }),\n              headers: {\n                \"Content-Type\": \"application/json\",\n              },\n            });\n\n            const body = await res.json();\n\n            if (!res.ok) {\n              throw new Error(body.message);\n            }\n\n            // Si el back no da ningún error, deslogueamos al usuario, le avisamos de que su contraseña ha cambiado y lo redirigimos a login\n            setToken(\"\");\n            toast.success(\"¡Contraseña actualizada con éxito!\");\n            navigate(\"/login\");\n          } catch (error) {\n            console.error(error);\n            toast.error(error.message);\n          }\n        }}\n      >\n        <label htmlFor=\"password\">Nueva contraseña:</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          onChange={(event) => {\n            setPassword(event.target.value);\n          }}\n        />\n\n        <label htmlFor=\"repeatedPassword\">Repetir nueva contraseña:</label>\n        <input\n          type=\"password\"\n          id=\"repeatedPassword\"\n          value={repeatedPassword}\n          onChange={(event) => {\n            setRepeatedPassword(event.target.value);\n          }}\n        />\n\n        <button>Cambiar contraseña</button>\n      </form>\n    </section>\n  );\n};\n\nexport default RecoverPasswordPage;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,eAAe,QAAQ,6BAA6B;;AAE7D;AAAA;AACA,MAAMC,mBAAmB,GAAG,MAAM;EAAA;EAChC;EACA,MAAM;IAAEC;EAAgB,CAAC,GAAGL,SAAS,EAAE;EAEvC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE5D,MAAMW,QAAQ,GAAGT,WAAW,EAAE;EAE9B,MAAM;IAAEU;EAAS,CAAC,GAAGR,eAAe,EAAE;EAEtC,oBACE;IAAA,wBACE;MAAA,UAAI;IAA0B;MAAA;MAAA;MAAA;IAAA,QAAK,eAEnC;MACE,QAAQ,EAAE,MAAOS,KAAK,IAAK;QACzB,IAAI;UACFA,KAAK,CAACC,cAAc,EAAE;UAEtB,IAAIP,QAAQ,KAAKE,gBAAgB,EAAE;YACjC,MAAM,IAAIM,KAAK,CAAC,8BAA8B,CAAC;UACjD;UAEA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;YAC9DC,MAAM,EAAE,KAAK;YACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACnBf,eAAe;cACfC,QAAQ;cACRE;YACF,CAAC,CAAC;YACFa,OAAO,EAAE;cACP,cAAc,EAAE;YAClB;UACF,CAAC,CAAC;UAEF,MAAMH,IAAI,GAAG,MAAMH,GAAG,CAACO,IAAI,EAAE;UAE7B,IAAI,CAACP,GAAG,CAACQ,EAAE,EAAE;YACX,MAAM,IAAIT,KAAK,CAACI,IAAI,CAACM,OAAO,CAAC;UAC/B;;UAEA;UACAb,QAAQ,CAAC,EAAE,CAAC;UACZT,KAAK,CAACuB,OAAO,CAAC,oCAAoC,CAAC;UACnDf,QAAQ,CAAC,QAAQ,CAAC;QACpB,CAAC,CAAC,OAAOgB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;UACpBxB,KAAK,CAACwB,KAAK,CAACA,KAAK,CAACF,OAAO,CAAC;QAC5B;MACF,CAAE;MAAA,wBAEF;QAAO,OAAO,EAAC,UAAU;QAAA,UAAC;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAQ,eACnD;QACE,IAAI,EAAC,UAAU;QACf,EAAE,EAAC,UAAU;QACb,KAAK,EAAElB,QAAS;QAChB,QAAQ,EAAGM,KAAK,IAAK;UACnBL,WAAW,CAACK,KAAK,CAACgB,MAAM,CAACC,KAAK,CAAC;QACjC;MAAE;QAAA;QAAA;QAAA;MAAA,QACF,eAEF;QAAO,OAAO,EAAC,kBAAkB;QAAA,UAAC;MAAyB;QAAA;QAAA;QAAA;MAAA,QAAQ,eACnE;QACE,IAAI,EAAC,UAAU;QACf,EAAE,EAAC,kBAAkB;QACrB,KAAK,EAAErB,gBAAiB;QACxB,QAAQ,EAAGI,KAAK,IAAK;UACnBH,mBAAmB,CAACG,KAAK,CAACgB,MAAM,CAACC,KAAK,CAAC;QACzC;MAAE;QAAA;QAAA;QAAA;MAAA,QACF,eAEF;QAAA,UAAQ;MAAkB;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAC9B;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GA5EIzB,mBAAmB;EAAA,QAEKJ,SAAS,EAKpBC,WAAW,EAEPE,eAAe;AAAA;AAAA,KAThCC,mBAAmB;AA8EzB,eAAeA,mBAAmB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}