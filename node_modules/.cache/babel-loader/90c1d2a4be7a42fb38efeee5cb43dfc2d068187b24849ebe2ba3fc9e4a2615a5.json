{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/PostPage/index.js\",\n  _s = $RefreshSig$();\nimport { Link, useParams } from \"react-router-dom\";\nimport Post from \"../../components/Post/index\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport Spinner from \"../../components/Spinner\";\nimport usePostById from \"../../hooks/usePostById\";\n\n// Página que carga una sola entry\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  // Recogemos el id de los params de la url\n  const {\n    id\n  } = useParams();\n\n  // Llamamos al custom hook useEntryById y le pasamos el id que hemos recogido de los params. Este hook se va a encargar de crear los estados entry, loading y errorMessage y un useEffect que carge los datos de la API después del primer render\n  const {\n    post,\n    loading,\n    errorMessage,\n    addVoteToPost\n  } = usePostById(id);\n\n  // Hacemos destructuring del objeto post\n  const {\n    text,\n    image,\n    avatar,\n    username,\n    email,\n    place,\n    idUser,\n    rate,\n    owner,\n    ratedByMe,\n    createdAt\n  } = post;\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Post page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n        msg: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Volver a inicio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this), Object.values(post).length > 0 && /*#__PURE__*/_jsxDEV(Post, {\n      id: id,\n      text: text,\n      image: image,\n      avatar: avatar,\n      username: username,\n      email: email,\n      place: place,\n      idUser: idUser,\n      rate: rate,\n      owner: owner,\n      ratedByMe: ratedByMe,\n      createdAt: createdAt,\n      addVoteToPost: addVoteToPost\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"QcN92VezJpTWYOM7r7r8hT2FeeY=\", false, function () {\n  return [useParams, usePostById];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["Link","useParams","Post","ErrorMessage","Spinner","usePostById","PostPage","id","post","loading","errorMessage","addVoteToPost","text","image","avatar","username","email","place","idUser","rate","owner","ratedByMe","createdAt","Object","values","length"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/PostPage/index.js"],"sourcesContent":["import { Link, useParams } from \"react-router-dom\";\nimport Post from \"../../components/Post/index\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport Spinner from \"../../components/Spinner\";\nimport usePostById from \"../../hooks/usePostById\";\n\n// Página que carga una sola entry\nconst PostPage = () => {\n  // Recogemos el id de los params de la url\n  const { id } = useParams();\n\n  // Llamamos al custom hook useEntryById y le pasamos el id que hemos recogido de los params. Este hook se va a encargar de crear los estados entry, loading y errorMessage y un useEffect que carge los datos de la API después del primer render\n  const { post, loading, errorMessage, addVoteToPost } = usePostById(id);\n\n  // Hacemos destructuring del objeto post\n  const {\n    text,\n    image,\n    avatar,\n    username,\n    email,\n    place,\n    idUser,\n    rate,\n    owner,\n    ratedByMe,\n    createdAt,\n  } = post;\n\n  return (\n    <section>\n      <h2>Post page</h2>\n\n      {/* Si hay mensaje de error, pintamos el componente ErrorMessage y un link\n      para volver a inicio */}\n      {errorMessage && (\n        <>\n          <ErrorMessage msg={errorMessage} />\n          <Link to=\"/\">Volver a inicio</Link>\n        </>\n      )}\n      {loading && <Spinner />}\n\n      {/* Si el objeto entry no está vacío, pintamos el componente Entry con todos los datos del objeto */}\n      {Object.values(post).length > 0 && (\n        <Post\n          id={id}\n          text={text}\n          image={image}\n          avatar={avatar}\n          username={username}\n          email={email}\n          place={place}\n          idUser={idUser}\n          rate={rate}\n          owner={owner}\n          ratedByMe={ratedByMe}\n          createdAt={createdAt}\n          addVoteToPost={addVoteToPost}\n        />\n      )}\n    </section>\n  );\n};\n\nexport default PostPage;\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AAAA;AAAA;AACA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGN,SAAS,EAAE;;EAE1B;EACA,MAAM;IAAEO,IAAI;IAAEC,OAAO;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGN,WAAW,CAACE,EAAE,CAAC;;EAEtE;EACA,MAAM;IACJK,IAAI;IACJC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,IAAI;IACJC,KAAK;IACLC,SAAS;IACTC;EACF,CAAC,GAAGd,IAAI;EAER,oBACE;IAAA,wBACE;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,EAIjBE,YAAY,iBACX;MAAA,wBACE,QAAC,YAAY;QAAC,GAAG,EAAEA;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,eACnC,QAAC,IAAI;QAAC,EAAE,EAAC,GAAG;QAAA,UAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA,gBAEtC,EACAD,OAAO,iBAAI,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG,EAGtBc,MAAM,CAACC,MAAM,CAAChB,IAAI,CAAC,CAACiB,MAAM,GAAG,CAAC,iBAC7B,QAAC,IAAI;MACH,EAAE,EAAElB,EAAG;MACP,IAAI,EAAEK,IAAK;MACX,KAAK,EAAEC,KAAM;MACb,MAAM,EAAEC,MAAO;MACf,QAAQ,EAAEC,QAAS;MACnB,KAAK,EAAEC,KAAM;MACb,KAAK,EAAEC,KAAM;MACb,MAAM,EAAEC,MAAO;MACf,IAAI,EAAEC,IAAK;MACX,KAAK,EAAEC,KAAM;MACb,SAAS,EAAEC,SAAU;MACrB,SAAS,EAAEC,SAAU;MACrB,aAAa,EAAEX;IAAc;MAAA;MAAA;MAAA;IAAA,QAEhC;EAAA;IAAA;IAAA;IAAA;EAAA,QACO;AAEd,CAAC;AAAC,GAxDIL,QAAQ;EAAA,QAEGL,SAAS,EAG+BI,WAAW;AAAA;AAAA,KAL9DC,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}