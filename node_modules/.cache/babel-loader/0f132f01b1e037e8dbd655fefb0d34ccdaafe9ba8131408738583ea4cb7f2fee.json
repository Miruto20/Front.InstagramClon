{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/context/PostsContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostsContext = /*#__PURE__*/createContext();\nexport const CustomPostsContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [posts, setPosts] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const addVoteToPost = _ref2 => {\n    let {\n      id,\n      newAvg,\n      valueRated\n    } = _ref2;\n    const index = posts.findIndex(post => post.id === id);\n    posts[index].valueRated = valueRated;\n    posts[index].rate = newAvg;\n    setPosts([...posts]);\n  };\n  const {\n    token\n  } = useTokenContext();\n\n  // useEffect que se ejecuta después del primer render y cada vez que el token cambia\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        // Cuando empezamos a hacer el fetch, cambiamos el estado loading a true\n        setLoading(true);\n\n        // Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(`http://localhost:4000/posts?${searchParams.toString()}`, {\n          headers: token ? {\n            Authorization: token\n          } : {}\n        });\n\n        // Nos traemos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta no viene bien, lanzamos un error con el mensaje que viene de la API\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        // Cargamos los datos de los posts en el estado de posts\n        setPosts([...body.data.posts]);\n        console.log(\"postsPostsContext\", posts);\n      } catch (error) {\n        // Si salta algún error, metemos el mensaje en el estado errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        // Al finalizar el fetch, cambiamos loading a false\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [token, searchParams, setPosts]);\n  return /*#__PURE__*/_jsxDEV(PostsContext.Provider, {\n    value: {\n      posts,\n      setPosts,\n      addVoteToPost,\n      loading,\n      errorMessage,\n      searchParams,\n      setSearchParams\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomPostsContextProvider, \"FEq8Hy2ywXDHdTcklYG7WHOpmBI=\", false, function () {\n  return [useSearchParams, useTokenContext];\n});\n_c = CustomPostsContextProvider;\nexport const usePostsContext = () => {\n  _s2();\n  return useContext(PostsContext);\n};\n_s2(usePostsContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CustomPostsContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useTokenContext","useSearchParams","PostsContext","CustomPostsContextProvider","children","posts","setPosts","errorMessage","setErrorMessage","loading","setLoading","searchParams","setSearchParams","addVoteToPost","id","newAvg","valueRated","index","findIndex","post","rate","token","fetchPosts","res","fetch","toString","headers","Authorization","body","json","ok","Error","message","data","console","log","error","usePostsContext"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/context/PostsContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { useSearchParams } from \"react-router-dom\";\n\nexport const PostsContext = createContext();\n\nexport const CustomPostsContextProvider = ({ children }) => {\n  const [posts, setPosts] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addVoteToPost = ({ id, newAvg, valueRated }) => {\n    const index = posts.findIndex((post) => post.id === id);\n\n    posts[index].valueRated = valueRated;\n    posts[index].rate = newAvg;\n\n    setPosts([...posts]);\n  };\n\n  const { token } = useTokenContext();\n\n  // useEffect que se ejecuta después del primer render y cada vez que el token cambia\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        // Cuando empezamos a hacer el fetch, cambiamos el estado loading a true\n        setLoading(true);\n\n        // Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(\n          `http://localhost:4000/posts?${searchParams.toString()}`,\n          {\n            headers: token ? { Authorization: token } : {},\n          }\n        );\n\n        // Nos traemos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta no viene bien, lanzamos un error con el mensaje que viene de la API\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        // Cargamos los datos de los posts en el estado de posts\n        setPosts([...body.data.posts]);\n        console.log(\"postsPostsContext\", posts);\n      } catch (error) {\n        // Si salta algún error, metemos el mensaje en el estado errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        // Al finalizar el fetch, cambiamos loading a false\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, [token, searchParams, setPosts]);\n\n  return (\n    <PostsContext.Provider\n      value={{\n        posts,\n        setPosts,\n        addVoteToPost,\n        loading,\n        errorMessage,\n        searchParams,\n        setSearchParams,\n      }}\n    >\n      {children}\n    </PostsContext.Provider>\n  );\n};\n\nexport const usePostsContext = () => {\n  return useContext(PostsContext);\n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,eAAe,QAAQ,kBAAkB;AAAC;AAEnD,OAAO,MAAMC,YAAY,gBAAGN,aAAa,EAAE;AAE3C,OAAO,MAAMO,0BAA0B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACrD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGX,eAAe,EAAE;EAEzD,MAAMY,aAAa,GAAG,SAAgC;IAAA,IAA/B;MAAEC,EAAE;MAAEC,MAAM;MAAEC;IAAW,CAAC;IAC/C,MAAMC,KAAK,GAAGZ,KAAK,CAACa,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC;IAEvDT,KAAK,CAACY,KAAK,CAAC,CAACD,UAAU,GAAGA,UAAU;IACpCX,KAAK,CAACY,KAAK,CAAC,CAACG,IAAI,GAAGL,MAAM;IAE1BT,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;EACtB,CAAC;EAED,MAAM;IAAEgB;EAAM,CAAC,GAAGrB,eAAe,EAAE;;EAEnC;EACAF,SAAS,CAAC,MAAM;IACd,MAAMwB,UAAU,GAAG,YAAY;MAC7B,IAAI;QACF;QACAZ,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMa,GAAG,GAAG,MAAMC,KAAK,CACpB,+BAA8Bb,YAAY,CAACc,QAAQ,EAAG,EAAC,EACxD;UACEC,OAAO,EAAEL,KAAK,GAAG;YAAEM,aAAa,EAAEN;UAAM,CAAC,GAAG,CAAC;QAC/C,CAAC,CACF;;QAED;QACA,MAAMO,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;;QAE7B;QACA,IAAI,CAACN,GAAG,CAACO,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;QAC/B;;QAEA;QACA1B,QAAQ,CAAC,CAAC,GAAGsB,IAAI,CAACK,IAAI,CAAC5B,KAAK,CAAC,CAAC;QAC9B6B,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE9B,KAAK,CAAC;MACzC,CAAC,CAAC,OAAO+B,KAAK,EAAE;QACd;QACA5B,eAAe,CAAC4B,KAAK,CAACJ,OAAO,CAAC;MAChC,CAAC,SAAS;QACR;QACAtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDY,UAAU,EAAE;EACd,CAAC,EAAE,CAACD,KAAK,EAAEV,YAAY,EAAEL,QAAQ,CAAC,CAAC;EAEnC,oBACE,QAAC,YAAY,CAAC,QAAQ;IACpB,KAAK,EAAE;MACLD,KAAK;MACLC,QAAQ;MACRO,aAAa;MACbJ,OAAO;MACPF,YAAY;MACZI,YAAY;MACZC;IACF,CAAE;IAAA,UAEDR;EAAQ;IAAA;IAAA;IAAA;EAAA,QACa;AAE5B,CAAC;AAAC,GAtEWD,0BAA0B;EAAA,QAIGF,eAAe,EAWrCD,eAAe;AAAA;AAAA,KAftBG,0BAA0B;AAwEvC,OAAO,MAAMkC,eAAe,GAAG,MAAM;EAAA;EACnC,OAAOxC,UAAU,CAACK,YAAY,CAAC;AACjC,CAAC;AAAC,IAFWmC,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}