{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/PostVotesStars/index.js\",\n  _s = $RefreshSig$();\nimport \"./style.css\";\nimport StarIcon from \"../StarIcon\";\nimport { useTokenContext } from \"../../context/TokenContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostVotesStars = _ref => {\n  _s();\n  let {\n    votes,\n    entryId,\n    addVoteToEntry\n  } = _ref;\n  const {\n    token\n  } = useTokenContext();\n\n  // En este array meteremos las estrellitas que vamos a generar\n  const stars = [];\n\n  // startsToFill es el número de estrellas que queremos pintar. Si la votación de la entrada es 2.6 pintaremos 3 estrellas, si es 2.4 pintaremos 2\n  const starsToFill = Math.round(votes);\n\n  // Hacemos un bucle que da 5 vueltas. En cada vuelta genera una estrella y la mete en el array de stars. Si la vuelta actual (1, 2, 3, 4 o 5) es menor o igual que las estrellas que queremos pintar, pintamos la estrella de negro, si no no\n  for (let currentStar = 1; currentStar <= 5; currentStar++) {\n    stars.push( /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: async e => {\n        try {\n          if (!addVoteToEntry) {\n            return;\n          }\n          e.preventDefault();\n          const res = await fetch(`http://localhost:4000/entries/${entryId}/votes`, {\n            method: \"POST\",\n            headers: {\n              Authorization: token,\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              value: currentStar\n            })\n          });\n          const body = await res.json();\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n          addVoteToEntry({\n            id: entryId,\n            newAvg: body.data.votes,\n            voteByLoggedUser: currentStar\n          });\n        } catch (error) {\n          console.error(error);\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(StarIcon, {\n        fill: currentStar <= starsToFill ? \"black\" : \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, currentStar, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this));\n  }\n\n  // Pintamos una ul con todos los li con las estrellas\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    className: \"entryVotesStars\",\n    children: stars\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n_s(PostVotesStars, \"O2CtlhlQvgLENTnMLZk0XGyacp0=\", false, function () {\n  return [useTokenContext];\n});\n_c = PostVotesStars;\nexport default PostVotesStars;\nvar _c;\n$RefreshReg$(_c, \"PostVotesStars\");","map":{"version":3,"names":["StarIcon","useTokenContext","PostVotesStars","votes","entryId","addVoteToEntry","token","stars","starsToFill","Math","round","currentStar","push","e","preventDefault","res","fetch","method","headers","Authorization","body","JSON","stringify","value","json","ok","Error","message","id","newAvg","data","voteByLoggedUser","error","console"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/PostVotesStars/index.js"],"sourcesContent":["import \"./style.css\";\nimport StarIcon from \"../StarIcon\";\nimport { useTokenContext } from \"../../context/TokenContext\";\n\nconst PostVotesStars = ({ votes, entryId, addVoteToEntry }) => {\n  const { token } = useTokenContext();\n\n  // En este array meteremos las estrellitas que vamos a generar\n  const stars = [];\n\n  // startsToFill es el número de estrellas que queremos pintar. Si la votación de la entrada es 2.6 pintaremos 3 estrellas, si es 2.4 pintaremos 2\n  const starsToFill = Math.round(votes);\n\n  // Hacemos un bucle que da 5 vueltas. En cada vuelta genera una estrella y la mete en el array de stars. Si la vuelta actual (1, 2, 3, 4 o 5) es menor o igual que las estrellas que queremos pintar, pintamos la estrella de negro, si no no\n  for (let currentStar = 1; currentStar <= 5; currentStar++) {\n    stars.push(\n      <li\n        key={currentStar}\n        onClick={async (e) => {\n          try {\n            if (!addVoteToEntry) {\n              return;\n            }\n\n            e.preventDefault();\n\n            const res = await fetch(\n              `http://localhost:4000/entries/${entryId}/votes`,\n              {\n                method: \"POST\",\n                headers: {\n                  Authorization: token,\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ value: currentStar }),\n              }\n            );\n\n            const body = await res.json();\n\n            if (!res.ok) {\n              throw new Error(body.message);\n            }\n\n            addVoteToEntry({\n              id: entryId,\n              newAvg: body.data.votes,\n              voteByLoggedUser: currentStar,\n            });\n          } catch (error) {\n            console.error(error);\n          }\n        }}\n      >\n        <StarIcon fill={currentStar <= starsToFill ? \"black\" : \"white\"} />\n      </li>\n    );\n  }\n\n  // Pintamos una ul con todos los li con las estrellas\n  return <ul className=\"entryVotesStars\">{stars}</ul>;\n};\n\nexport default PostVotesStars;\n"],"mappings":";;AAAA,OAAO,aAAa;AACpB,OAAOA,QAAQ,MAAM,aAAa;AAClC,SAASC,eAAe,QAAQ,4BAA4B;AAAC;AAE7D,MAAMC,cAAc,GAAG,QAAwC;EAAA;EAAA,IAAvC;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAe,CAAC;EACxD,MAAM;IAAEC;EAAM,CAAC,GAAGL,eAAe,EAAE;;EAEnC;EACA,MAAMM,KAAK,GAAG,EAAE;;EAEhB;EACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,KAAK,CAAC;;EAErC;EACA,KAAK,IAAIQ,WAAW,GAAG,CAAC,EAAEA,WAAW,IAAI,CAAC,EAAEA,WAAW,EAAE,EAAE;IACzDJ,KAAK,CAACK,IAAI,eACR;MAEE,OAAO,EAAE,MAAOC,CAAC,IAAK;QACpB,IAAI;UACF,IAAI,CAACR,cAAc,EAAE;YACnB;UACF;UAEAQ,CAAC,CAACC,cAAc,EAAE;UAElB,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACpB,iCAAgCZ,OAAQ,QAAO,EAChD;YACEa,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACPC,aAAa,EAAEb,KAAK;cACpB,cAAc,EAAE;YAClB,CAAC;YACDc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cAAEC,KAAK,EAAEZ;YAAY,CAAC;UAC7C,CAAC,CACF;UAED,MAAMS,IAAI,GAAG,MAAML,GAAG,CAACS,IAAI,EAAE;UAE7B,IAAI,CAACT,GAAG,CAACU,EAAE,EAAE;YACX,MAAM,IAAIC,KAAK,CAACN,IAAI,CAACO,OAAO,CAAC;UAC/B;UAEAtB,cAAc,CAAC;YACbuB,EAAE,EAAExB,OAAO;YACXyB,MAAM,EAAET,IAAI,CAACU,IAAI,CAAC3B,KAAK;YACvB4B,gBAAgB,EAAEpB;UACpB,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOqB,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACtB;MACF,CAAE;MAAA,uBAEF,QAAC,QAAQ;QAAC,IAAI,EAAErB,WAAW,IAAIH,WAAW,GAAG,OAAO,GAAG;MAAQ;QAAA;QAAA;QAAA;MAAA;IAAG,GArC7DG,WAAW;MAAA;MAAA;MAAA;IAAA,QAsCb,CACN;EACH;;EAEA;EACA,oBAAO;IAAI,SAAS,EAAC,iBAAiB;IAAA,UAAEJ;EAAK;IAAA;IAAA;IAAA;EAAA,QAAM;AACrD,CAAC;AAAC,GAzDIL,cAAc;EAAA,QACAD,eAAe;AAAA;AAAA,KAD7BC,cAAc;AA2DpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}