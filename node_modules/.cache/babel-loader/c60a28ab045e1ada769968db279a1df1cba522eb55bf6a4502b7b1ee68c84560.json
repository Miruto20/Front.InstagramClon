{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/NewPostPage.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewPostPage = () => {\n  _s();\n  const [text, SetText] = useState(\"\");\n  const [place, SetPlace] = useState(\"\");\n  const [errorMessage, SetErrorMessage] = useState(\"\");\n  const imagesInputRef = useRef();\n  const {\n    token\n  } = useTokenContext();\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" Crea tu nuevo Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async event => {\n        try {\n          event.preventDefault();\n          const images = imagesInputRef.current.files;\n          const formData = new FormData();\n          formData.set(\"text\", text);\n          formData.set(\"place\", place);\n          if (images.length) {\n            for (const image of images) {\n              formData.set(image.name, image);\n            }\n          }\n          const res = await fetch(\"http://localhost:4000/posts\", {\n            method: \"POST\",\n            headers: {\n              Authorization: token\n            },\n            body: formData\n          });\n          const body = await res.json();\n        } catch (error) {}\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"text\",\n        required: true,\n        value: text,\n        onChange: event => {\n          SetText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"place\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"place\",\n        required: true,\n        value: place,\n        onChange: event => {\n          SetPlace(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"image\",\n        type: \"file\",\n        multiple: true,\n        required: true,\n        accept: \"image/*\",\n        ref: imagesInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Env\\xEDa tu publicaci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_s(NewPostPage, \"ks9RTe2KQAGdWDDwDBD45ANPua4=\", false, function () {\n  return [useTokenContext];\n});\n_c = NewPostPage;\nexport default NewPostPage;\nvar _c;\n$RefreshReg$(_c, \"NewPostPage\");","map":{"version":3,"names":["useState","useRef","useTokenContext","NewPostPage","text","SetText","place","SetPlace","errorMessage","SetErrorMessage","imagesInputRef","token","event","preventDefault","images","current","files","formData","FormData","set","length","image","name","res","fetch","method","headers","Authorization","body","json","error","target","value"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/NewPostPage.js"],"sourcesContent":["import { useState, useRef } from \"react\";\nimport { useTokenContext } from \"../context/TokenContext\";\n\nconst NewPostPage = () => {\n  const [text, SetText] = useState(\"\");\n  const [place, SetPlace] = useState(\"\");\n  const [errorMessage, SetErrorMessage] = useState(\"\");\n\n  const imagesInputRef = useRef();\n\n  const { token } = useTokenContext();\n\n  return (\n    <section>\n      <h2> Crea tu nuevo Post</h2>\n\n      <form\n        onSubmit={async (event) => {\n          try {\n            event.preventDefault();\n            const images = imagesInputRef.current.files;\n\n            const formData = new FormData();\n\n            formData.set(\"text\", text);\n            formData.set(\"place\", place);\n\n            if (images.length) {\n              for (const image of images) {\n                formData.set(image.name, image);\n              }\n            }\n\n            const res = await fetch(\"http://localhost:4000/posts\", {\n              method: \"POST\",\n              headers: { Authorization: token },\n              body: formData,\n            });\n\n            const body = await res.json();\n          } catch (error) {}\n        }}\n      >\n        <label htmlFor=\"text\"></label>\n        <input\n          id=\"text\"\n          required\n          value={text}\n          onChange={(event) => {\n            SetText(event.target.value);\n          }}\n        ></input>\n\n        <label htmlFor=\"place\"></label>\n        <input\n          id=\"place\"\n          required\n          value={place}\n          onChange={(event) => {\n            SetPlace(event.target.value);\n          }}\n        ></input>\n\n        <label htmlFor=\"image\"></label>\n        <input\n          id=\"image\"\n          type=\"file\"\n          multiple\n          required\n          accept=\"image/*\"\n          ref={imagesInputRef}\n        ></input>\n\n        <button>Envía tu publicación</button>\n      </form>\n    </section>\n  );\n};\n\nexport default NewPostPage;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,SAASC,eAAe,QAAQ,yBAAyB;AAAC;AAE1D,MAAMC,WAAW,GAAG,MAAM;EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMU,cAAc,GAAGT,MAAM,EAAE;EAE/B,MAAM;IAAEU;EAAM,CAAC,GAAGT,eAAe,EAAE;EAEnC,oBACE;IAAA,wBACE;MAAA,UAAI;IAAmB;MAAA;MAAA;MAAA;IAAA,QAAK,eAE5B;MACE,QAAQ,EAAE,MAAOU,KAAK,IAAK;QACzB,IAAI;UACFA,KAAK,CAACC,cAAc,EAAE;UACtB,MAAMC,MAAM,GAAGJ,cAAc,CAACK,OAAO,CAACC,KAAK;UAE3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;UAE/BD,QAAQ,CAACE,GAAG,CAAC,MAAM,EAAEf,IAAI,CAAC;UAC1Ba,QAAQ,CAACE,GAAG,CAAC,OAAO,EAAEb,KAAK,CAAC;UAE5B,IAAIQ,MAAM,CAACM,MAAM,EAAE;YACjB,KAAK,MAAMC,KAAK,IAAIP,MAAM,EAAE;cAC1BG,QAAQ,CAACE,GAAG,CAACE,KAAK,CAACC,IAAI,EAAED,KAAK,CAAC;YACjC;UACF;UAEA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;YACrDC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cAAEC,aAAa,EAAEhB;YAAM,CAAC;YACjCiB,IAAI,EAAEX;UACR,CAAC,CAAC;UAEF,MAAMW,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;QAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE,CAAC;MACnB,CAAE;MAAA,wBAEF;QAAO,OAAO,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAS,eAC9B;QACE,EAAE,EAAC,MAAM;QACT,QAAQ;QACR,KAAK,EAAE1B,IAAK;QACZ,QAAQ,EAAGQ,KAAK,IAAK;UACnBP,OAAO,CAACO,KAAK,CAACmB,MAAM,CAACC,KAAK,CAAC;QAC7B;MAAE;QAAA;QAAA;QAAA;MAAA,QACK,eAET;QAAO,OAAO,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAS,eAC/B;QACE,EAAE,EAAC,OAAO;QACV,QAAQ;QACR,KAAK,EAAE1B,KAAM;QACb,QAAQ,EAAGM,KAAK,IAAK;UACnBL,QAAQ,CAACK,KAAK,CAACmB,MAAM,CAACC,KAAK,CAAC;QAC9B;MAAE;QAAA;QAAA;QAAA;MAAA,QACK,eAET;QAAO,OAAO,EAAC;MAAO;QAAA;QAAA;QAAA;MAAA,QAAS,eAC/B;QACE,EAAE,EAAC,OAAO;QACV,IAAI,EAAC,MAAM;QACX,QAAQ;QACR,QAAQ;QACR,MAAM,EAAC,SAAS;QAChB,GAAG,EAAEtB;MAAe;QAAA;QAAA;QAAA;MAAA,QACb,eAET;QAAA,UAAQ;MAAoB;QAAA;QAAA;QAAA;MAAA,QAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAChC;EAAA;IAAA;IAAA;IAAA;EAAA,QACC;AAEd,CAAC;AAAC,GA1EIP,WAAW;EAAA,QAOGD,eAAe;AAAA;AAAA,KAP7BC,WAAW;AA4EjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}