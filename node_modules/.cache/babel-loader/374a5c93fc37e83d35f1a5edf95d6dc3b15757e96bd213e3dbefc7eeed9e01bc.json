{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/ValidationPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n// import { toast } from \"react-toastify\";\n// import ErrorMessage from \"../../components/ErrorMessage\";\nimport Spinner from \"../components/Spinner\";\n\n// Página a la que va el usuario cuando hace click en el botón del email para activar su cuenta\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ValidationPage = () => {\n  _s();\n  // Recogemos el registrationCode de los params de la url\n  const {\n    registrationCode\n  } = useParams();\n\n  // Iniciamos los estados loading y errorMessage\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // Nos traemos la función navigate para poder redireccionar al usuario\n  const navigate = useNavigate();\n\n  // El useEffect se ejecutará después del primer render\n  useEffect(() => {\n    const validateUser = async () => {\n      try {\n        // Cambiamos loading a true mientras hacemos el fetch a la API\n        setLoading(true);\n\n        // Hacemos una petición con método PUT al endpoint para activar un usuario. Mandamos el registrationCode por parámetro\n        const res = await fetch(`http://localhost:4000/users/validate/${registrationCode}`, {\n          method: \"PUT\"\n        });\n\n        // Nos treamos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta viene mal, lanzamos un error con el mensaje que viene en el body del back\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        /* // Si todo va bien, mostramos una alerta al usuario indicando que está activado y lo redireccionamos a \"/login\" para que se pueda loguear\n         toast.success(\"¡Has validado tu cuenta correctamente!\"); */\n        navigate(\"/login\");\n      } catch (error) {\n        // Si algo va mal, sacamos el error por consola y metemos el mensaje en el estado errorMessage\n        console.error(error);\n        setErrorMessage(error.message);\n      } finally {\n        // Cuando finaliza la función cambiamos loading a false\n        setLoading(false);\n      }\n    };\n    validateUser();\n  }, [navigate, registrationCode]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [errorMessage ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Error en la validaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 23\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Validating...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 57\n    }, this), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ValidationPage, \"7n5834tyx67HUHVROWT1txWbq6k=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ValidationPage;\nexport default ValidationPage;\n\n// // Validar un usuario.\n// app.put(\"/users/validate/:registrationCode\", validateUser);\n\n// const { registrationCode } = req.params;\nvar _c;\n$RefreshReg$(_c, \"ValidationPage\");","map":{"version":3,"names":["useEffect","useState","useParams","useNavigate","Spinner","ValidationPage","registrationCode","loading","setLoading","errorMessage","setErrorMessage","navigate","validateUser","res","fetch","method","body","json","ok","Error","message","error","console"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/ValidationPage.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n// import { toast } from \"react-toastify\";\n// import ErrorMessage from \"../../components/ErrorMessage\";\nimport Spinner from \"../components/Spinner\";\n\n// Página a la que va el usuario cuando hace click en el botón del email para activar su cuenta\nconst ValidationPage = () => {\n  // Recogemos el registrationCode de los params de la url\n  const { registrationCode } = useParams();\n\n  // Iniciamos los estados loading y errorMessage\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  // Nos traemos la función navigate para poder redireccionar al usuario\n  const navigate = useNavigate();\n\n  // El useEffect se ejecutará después del primer render\n  useEffect(() => {\n    const validateUser = async () => {\n      try {\n        // Cambiamos loading a true mientras hacemos el fetch a la API\n        setLoading(true);\n\n        // Hacemos una petición con método PUT al endpoint para activar un usuario. Mandamos el registrationCode por parámetro\n        const res = await fetch(\n          `http://localhost:4000/users/validate/${registrationCode}`,\n          { method: \"PUT\" }\n        );\n\n        // Nos treamos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta viene mal, lanzamos un error con el mensaje que viene en el body del back\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        /* // Si todo va bien, mostramos una alerta al usuario indicando que está activado y lo redireccionamos a \"/login\" para que se pueda loguear\n\n        toast.success(\"¡Has validado tu cuenta correctamente!\"); */\n        navigate(\"/login\");\n      } catch (error) {\n        // Si algo va mal, sacamos el error por consola y metemos el mensaje en el estado errorMessage\n        console.error(error);\n        setErrorMessage(error.message);\n      } finally {\n        // Cuando finaliza la función cambiamos loading a false\n        setLoading(false);\n      }\n    };\n\n    validateUser();\n  }, [navigate, registrationCode]);\n\n  return (\n    <section>\n      {errorMessage ? <h2>Error en la validación</h2> : <h2>Validating...</h2>}\n\n      {loading && <Spinner />}\n\n      {/* {errorMessage && <ErrorMessage msg={errorMessage} />} */}\n    </section>\n  );\n};\n\nexport default ValidationPage;\n\n// // Validar un usuario.\n// app.put(\"/users/validate/:registrationCode\", validateUser);\n\n// const { registrationCode } = req.params;\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD;AACA;AACA,OAAOC,OAAO,MAAM,uBAAuB;;AAE3C;AAAA;AACA,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B;EACA,MAAM;IAAEC;EAAiB,CAAC,GAAGJ,SAAS,EAAE;;EAExC;EACA,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMU,QAAQ,GAAGR,WAAW,EAAE;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACd,MAAMY,YAAY,GAAG,YAAY;MAC/B,IAAI;QACF;QACAJ,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMK,GAAG,GAAG,MAAMC,KAAK,CACpB,wCAAuCR,gBAAiB,EAAC,EAC1D;UAAES,MAAM,EAAE;QAAM,CAAC,CAClB;;QAED;QACA,MAAMC,IAAI,GAAG,MAAMH,GAAG,CAACI,IAAI,EAAE;;QAE7B;QACA,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;QAC/B;;QAEA;AACR;QAEQT,QAAQ,CAAC,QAAQ,CAAC;MACpB,CAAC,CAAC,OAAOU,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;QACpBX,eAAe,CAACW,KAAK,CAACD,OAAO,CAAC;MAChC,CAAC,SAAS;QACR;QACAZ,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDI,YAAY,EAAE;EAChB,CAAC,EAAE,CAACD,QAAQ,EAAEL,gBAAgB,CAAC,CAAC;EAEhC,oBACE;IAAA,WACGG,YAAY,gBAAG;MAAA,UAAI;IAAsB;MAAA;MAAA;MAAA;IAAA,QAAK,gBAAG;MAAA,UAAI;IAAa;MAAA;MAAA;MAAA;IAAA,QAAK,EAEvEF,OAAO,iBAAI,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAGf;AAEd,CAAC;AAAC,GA1DIF,cAAc;EAAA,QAEWH,SAAS,EAOrBC,WAAW;AAAA;AAAA,KATxBE,cAAc;AA4DpB,eAAeA,cAAc;;AAE7B;AACA;;AAEA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}