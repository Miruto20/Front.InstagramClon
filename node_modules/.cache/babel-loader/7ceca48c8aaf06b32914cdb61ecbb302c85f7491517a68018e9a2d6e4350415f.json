{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/CommentForm/index.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\nimport { usePostsContext } from \"../../context/PostsContext\";\nimport { Link } from \"react-router-dom\";\nimport PostPhoto from \"../PostPhoto\";\n\n//para renderizarlo tras crearlo  PROBAR ESTOOO\n//necesito ahora setPosts y Posts, primero filter para buscar el post, luego le añado la info para que lo pinte y set para que renderice\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CommentForm = _ref => {\n  _s();\n  let {\n    idPost,\n    idUser,\n    coments\n  } = _ref;\n  const [text, setText] = useState(\"\");\n  const {\n    token,\n    loggedUser\n  } = useTokenContext();\n  const {\n    setPosts,\n    posts,\n    addComentToPost\n  } = usePostsContext();\n  const {\n    username: usernameLogged,\n    avatar: avatarLogged\n  } = loggedUser;\n  // console.log(\"posts\", posts);\n\n  /*   const addComentToPost = ({ id, idUser, text, username, avatar }) => {\n    return posts.map((post) => {\n      if (post.id === id) {\n        console.log(\"id\", id);\n        return {\n          ...post,\n          coments: [\n            ...post.coments,\n            {\n              id: post.coments.length + 1,\n              idUser,\n              text,\n              username,\n              avatar,\n            },\n          ],\n        };\n      } else {\n        return post;\n      }\n    });\n  }; */\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"ComentList\",\n      children: coments.map(coment => {\n        const {\n          avatar: avatarComent,\n          id: idComent,\n          username: usernameComent,\n          text: textComent,\n          idUser: idUserComent\n        } = coment;\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(PostPhoto, {\n            image: avatarComent,\n            username: usernameComent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: `/posts/${idUserComent}`,\n            children: /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: usernameComent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: textComent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, idComent, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: async e => {\n        try {\n          e.preventDefault();\n          const res = await fetch(`http://localhost:4000/posts/${idPost}/coments`, {\n            method: \"POST\",\n            headers: {\n              Authorization: token,\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              text,\n              idUser,\n              idPost\n            })\n          });\n          const body = await res.json();\n          console.log(\"body\", body.data.coments[coments.length - 1]);\n          if (!res.ok) {\n            throw new Error(body.message);\n          }\n          const updatedPosts = addComentToPost({\n            id: idPost,\n            idUser: body.data.coments[coments.length - 1].idUser,\n            text: body.data.coments[coments.length - 1].text,\n            username: body.data.coments[coments.length - 1].username,\n            avatar: body.data.coments[coments.length - 1].avatar\n          });\n          setPosts(updatedPosts);\n          setText(\"\");\n        } catch (error) {\n          console.error(error);\n        } finally {}\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"text\",\n        children: [\"Deja un comentario\", \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"text\",\n        type: \"text\",\n        value: text,\n        required: true,\n        onChange: event => {\n          setText(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(CommentForm, \"e97qWvQp9oqoEGNelS4nsFx68pE=\", false, function () {\n  return [useTokenContext, usePostsContext];\n});\n_c = CommentForm;\nexport default CommentForm;\nvar _c;\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"names":["useState","useTokenContext","usePostsContext","Link","PostPhoto","CommentForm","idPost","idUser","coments","text","setText","token","loggedUser","setPosts","posts","addComentToPost","username","usernameLogged","avatar","avatarLogged","map","coment","avatarComent","id","idComent","usernameComent","textComent","idUserComent","e","preventDefault","res","fetch","method","headers","Authorization","body","JSON","stringify","json","console","log","data","length","ok","Error","message","updatedPosts","error","event","target","value"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/components/CommentForm/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\nimport { usePostsContext } from \"../../context/PostsContext\";\nimport { Link } from \"react-router-dom\";\nimport PostPhoto from \"../PostPhoto\";\n\n//para renderizarlo tras crearlo  PROBAR ESTOOO\n//necesito ahora setPosts y Posts, primero filter para buscar el post, luego le añado la info para que lo pinte y set para que renderice\n\nconst CommentForm = ({ idPost, idUser, coments }) => {\n  const [text, setText] = useState(\"\");\n  const { token, loggedUser } = useTokenContext();\n  const { setPosts, posts, addComentToPost } = usePostsContext();\n\n  const { username: usernameLogged, avatar: avatarLogged } = loggedUser;\n  // console.log(\"posts\", posts);\n\n  /*   const addComentToPost = ({ id, idUser, text, username, avatar }) => {\n    return posts.map((post) => {\n      if (post.id === id) {\n        console.log(\"id\", id);\n        return {\n          ...post,\n          coments: [\n            ...post.coments,\n            {\n              id: post.coments.length + 1,\n              idUser,\n              text,\n              username,\n              avatar,\n            },\n          ],\n        };\n      } else {\n        return post;\n      }\n    });\n  }; */\n\n  return (\n    <section>\n      <ul className=\"ComentList\">\n        {coments.map((coment) => {\n          const {\n            avatar: avatarComent,\n            id: idComent,\n            username: usernameComent,\n            text: textComent,\n            idUser: idUserComent,\n          } = coment;\n\n          return (\n            <li key={idComent}>\n              <PostPhoto image={avatarComent} username={usernameComent} />\n              <Link to={`/posts/${idUserComent}`}>\n                <h4>{usernameComent}</h4>\n              </Link>\n              <p>{textComent}</p>\n            </li>\n          );\n        })}\n      </ul>\n\n      <form\n        onSubmit={async (e) => {\n          try {\n            e.preventDefault();\n\n            const res = await fetch(\n              `http://localhost:4000/posts/${idPost}/coments`,\n              {\n                method: \"POST\",\n                headers: {\n                  Authorization: token,\n                  \"Content-Type\": \"application/json\",\n                },\n                body: JSON.stringify({ text, idUser, idPost }),\n              }\n            );\n\n            const body = await res.json();\n            console.log(\"body\", body.data.coments[coments.length - 1]);\n\n            if (!res.ok) {\n              throw new Error(body.message);\n            }\n            const updatedPosts = addComentToPost({\n              id: idPost,\n              idUser: body.data.coments[coments.length - 1].idUser,\n              text: body.data.coments[coments.length - 1].text,\n              username: body.data.coments[coments.length - 1].username,\n              avatar: body.data.coments[coments.length - 1].avatar,\n            });\n            setPosts(updatedPosts);\n            setText(\"\");\n          } catch (error) {\n            console.error(error);\n          } finally {\n          }\n        }}\n      >\n        <label htmlFor=\"text\">\n          Deja un comentario\n          {/* (más adelante ternario con post.comets<0 \"se el primero\") */}:\n        </label>\n        <input\n          id=\"text\"\n          type=\"text\"\n          value={text}\n          required\n          onChange={(event) => {\n            setText(event.target.value);\n          }}\n        />\n\n        <button>Enviar</button>\n      </form>\n    </section>\n  );\n};\n\nexport default CommentForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}