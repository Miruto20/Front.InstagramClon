{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Post from \"../components/Post\";\nimport { useTokenContext } from \"../context/TokenContext\";\nconst usePostByIdUser = idUser => {\n  _s();\n  const [post, setPost] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [usernamePage, setUsernamePage] = useState(\"\");\n  const [avatarPage, setAvatarPage] = useState(\"\");\n  const {\n    token\n  } = useTokenContext();\n  /* \n  const addVoteToPost = ({ newAvg, ratedByMe }) => {\n    post.ratedByMe = ratedByMe;\n    post.votes = newAvg;\n     setPost({ ...post });\n  }; */\n\n  useEffect(() => {\n    const fetchPostByIdUser = async () => {\n      try {\n        setLoading(true);\n        const res = await fetch(`http://localhost:4000/posts/${idUser}`, {\n          headers: token ? {\n            Authorization: token\n          } : {}\n        });\n        const body = await res.json();\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n        setPost(body.data.post);\n        console.log(\"PostidUser\", Post);\n        setUsernamePage(body.data.post[0].username);\n        setAvatarPage(body.data.post[0].avatar);\n      } catch (error) {\n        console.error(error);\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPostByIdUser();\n  }, [idUser, token, usernamePage]);\n  return {\n    post: post,\n    usernamePage,\n    setUsernamePage,\n    avatarPage,\n    loading,\n    errorMessage\n  };\n};\n_s(usePostByIdUser, \"drqMpa54sBX0B7npwuaQ9y6rqQI=\", false, function () {\n  return [useTokenContext];\n});\nexport default usePostByIdUser;","map":{"version":3,"names":["useState","useEffect","Post","useTokenContext","usePostByIdUser","idUser","post","setPost","loading","setLoading","errorMessage","setErrorMessage","usernamePage","setUsernamePage","avatarPage","setAvatarPage","token","fetchPostByIdUser","res","fetch","headers","Authorization","body","json","ok","Error","message","data","console","log","username","avatar","error"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/hooks/usePostsByIdUser.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Post from \"../components/Post\";\nimport { useTokenContext } from \"../context/TokenContext\";\n\nconst usePostByIdUser = (idUser) => {\n  const [post, setPost] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [usernamePage, setUsernamePage] = useState(\"\");\n  const [avatarPage, setAvatarPage] = useState(\"\");\n\n  const { token } = useTokenContext();\n  /* \n  const addVoteToPost = ({ newAvg, ratedByMe }) => {\n    post.ratedByMe = ratedByMe;\n    post.votes = newAvg;\n\n    setPost({ ...post });\n  }; */\n\n  useEffect(() => {\n    const fetchPostByIdUser = async () => {\n      try {\n        setLoading(true);\n        const res = await fetch(`http://localhost:4000/posts/${idUser}`, {\n          headers: token ? { Authorization: token } : {},\n        });\n        const body = await res.json();\n\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n        setPost(body.data.post);\n        console.log(\"PostidUser\", Post);\n        setUsernamePage(body.data.post[0].username);\n        setAvatarPage(body.data.post[0].avatar);\n      } catch (error) {\n        console.error(error);\n        setErrorMessage(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPostByIdUser();\n  }, [idUser, token, usernamePage]);\n\n  return {\n    post: post,\n    usernamePage,\n    setUsernamePage,\n    avatarPage,\n    loading,\n    errorMessage,\n  };\n};\n\nexport default usePostByIdUser;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAAA;EAClC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM;IAAEgB;EAAM,CAAC,GAAGb,eAAe,EAAE;EACnC;AACF;AACA;AACA;AACA;AACA;;EAGEF,SAAS,CAAC,MAAM;IACd,MAAMgB,iBAAiB,GAAG,YAAY;MACpC,IAAI;QACFR,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8Bd,MAAO,EAAC,EAAE;UAC/De,OAAO,EAAEJ,KAAK,GAAG;YAAEK,aAAa,EAAEL;UAAM,CAAC,GAAG,CAAC;QAC/C,CAAC,CAAC;QACF,MAAMM,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,EAAE;QAE7B,IAAI,CAACL,GAAG,CAACM,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;QAC/B;QACAnB,OAAO,CAACe,IAAI,CAACK,IAAI,CAACrB,IAAI,CAAC;QACvBsB,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE3B,IAAI,CAAC;QAC/BW,eAAe,CAACS,IAAI,CAACK,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAACwB,QAAQ,CAAC;QAC3Cf,aAAa,CAACO,IAAI,CAACK,IAAI,CAACrB,IAAI,CAAC,CAAC,CAAC,CAACyB,MAAM,CAAC;MACzC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;QACpBrB,eAAe,CAACqB,KAAK,CAACN,OAAO,CAAC;MAChC,CAAC,SAAS;QACRjB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDQ,iBAAiB,EAAE;EACrB,CAAC,EAAE,CAACZ,MAAM,EAAEW,KAAK,EAAEJ,YAAY,CAAC,CAAC;EAEjC,OAAO;IACLN,IAAI,EAAEA,IAAI;IACVM,YAAY;IACZC,eAAe;IACfC,UAAU;IACVN,OAAO;IACPE;EACF,CAAC;AACH,CAAC;AAAC,GAnDIN,eAAe;EAAA,QAODD,eAAe;AAAA;AA8CnC,eAAeC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}