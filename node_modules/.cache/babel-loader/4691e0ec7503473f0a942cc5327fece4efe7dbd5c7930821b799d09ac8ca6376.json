{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/PostPage/index.js\",\n  _s = $RefreshSig$();\nimport { Link, useParams } from \"react-router-dom\";\nimport Post from \"../../components/Post/index\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport Spinner from \"../../components/Spinner\";\nimport usePostById from \"../../hooks/usePostById\";\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\nimport CommentForm from \"../../components/CommentForm/index\";\n\n// Página que carga un solo post\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostPage = () => {\n  _s();\n  // Recogemos el id de los params de la url\n  const {\n    id\n  } = useParams();\n  const {\n    loggedUser\n  } = useTokenContext();\n  console.log(\"loggedUser\", loggedUser);\n  console.log(\"id1\", id);\n  const {\n    username: usernameLogged,\n    avatar: avatarLogged,\n    id: idLogged\n  } = loggedUser;\n\n  // const [showCommentModal, setShowCommentModal] = useState(false);\n\n  // Llamamos al custom hook useEntryById y le pasamos el id que hemos recogido de los params. Este hook se va a encargar de crear los estados entry, loading y errorMessage y un useEffect que carge los datos de la API después del primer render\n  const {\n    post,\n    loading,\n    errorMessage,\n    addVoteToPost\n  } = usePostById(id);\n\n  // Hacemos destructuring del objeto post\n  const {\n    text,\n    image,\n    avatar,\n    username,\n    email,\n    place,\n    idUser,\n    rate,\n    owner,\n    ratedByMe,\n    coments,\n    valueRated,\n    createdAt\n  } = post;\n  console.log(\"coments\", coments, post);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Post page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n        msg: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Volver a inicio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), loading && /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 19\n    }, this), Object.values(post).length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Post, {\n        id: id,\n        text: text,\n        image: image,\n        avatar: avatar,\n        username: username,\n        email: email,\n        place: place,\n        idUser: idUser,\n        rate: rate,\n        owner: owner,\n        coments: coments,\n        ratedByMe: ratedByMe,\n        valueRated: valueRated,\n        createdAt: createdAt,\n        addVoteToPost: addVoteToPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n        idPost: id,\n        idUser: idLogged\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(PostPage, \"pyBHhW1XjmTsSszztPvBA5omhzc=\", false, function () {\n  return [useParams, useTokenContext, usePostById];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["Link","useParams","Post","ErrorMessage","Spinner","usePostById","useState","useTokenContext","CommentForm","PostPage","id","loggedUser","console","log","username","usernameLogged","avatar","avatarLogged","idLogged","post","loading","errorMessage","addVoteToPost","text","image","email","place","idUser","rate","owner","ratedByMe","coments","valueRated","createdAt","Object","values","length"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/page/PostPage/index.js"],"sourcesContent":["import { Link, useParams } from \"react-router-dom\";\nimport Post from \"../../components/Post/index\";\nimport ErrorMessage from \"../../components/ErrorMessage\";\nimport Spinner from \"../../components/Spinner\";\nimport usePostById from \"../../hooks/usePostById\";\nimport { useState } from \"react\";\nimport { useTokenContext } from \"../../context/TokenContext\";\n\nimport CommentForm from \"../../components/CommentForm/index\";\n\n// Página que carga un solo post\nconst PostPage = () => {\n  // Recogemos el id de los params de la url\n  const { id } = useParams();\n\n  const { loggedUser } = useTokenContext();\n  console.log(\"loggedUser\", loggedUser);\n  console.log(\"id1\", id);\n\n  const {\n    username: usernameLogged,\n    avatar: avatarLogged,\n    id: idLogged,\n  } = loggedUser;\n\n  // const [showCommentModal, setShowCommentModal] = useState(false);\n\n  // Llamamos al custom hook useEntryById y le pasamos el id que hemos recogido de los params. Este hook se va a encargar de crear los estados entry, loading y errorMessage y un useEffect que carge los datos de la API después del primer render\n  const { post, loading, errorMessage, addVoteToPost } = usePostById(id);\n\n  // Hacemos destructuring del objeto post\n  const {\n    text,\n    image,\n    avatar,\n    username,\n    email,\n    place,\n    idUser,\n    rate,\n    owner,\n    ratedByMe,\n    coments,\n    valueRated,\n    createdAt,\n  } = post;\n  console.log(\"coments\", coments, post);\n\n  return (\n    <section>\n      <h2>Post page</h2>\n\n      {/* Si hay mensaje de error, pintamos el componente ErrorMessage y un link\n      para volver a inicio */}\n      {errorMessage && (\n        <>\n          <ErrorMessage msg={errorMessage} />\n          <Link to=\"/\">Volver a inicio</Link>\n        </>\n      )}\n      {loading && <Spinner />}\n\n      {/* Si el objeto post no está vacío, pintamos el componente Post con todos los datos del objeto */}\n      {Object.values(post).length > 0 && (\n        <>\n          <Post\n            id={id}\n            text={text}\n            image={image}\n            avatar={avatar}\n            username={username}\n            email={email}\n            place={place}\n            idUser={idUser}\n            rate={rate}\n            owner={owner}\n            coments={coments}\n            ratedByMe={ratedByMe}\n            valueRated={valueRated}\n            createdAt={createdAt}\n            addVoteToPost={addVoteToPost}\n          />\n          <CommentForm idPost={id} idUser={idLogged} />\n        </>\n      )}\n    </section>\n  );\n};\n\nexport default PostPage;\n"],"mappings":";;AAAA,SAASA,IAAI,EAAEC,SAAS,QAAQ,kBAAkB;AAClD,OAAOC,IAAI,MAAM,6BAA6B;AAC9C,OAAOC,YAAY,MAAM,+BAA+B;AACxD,OAAOC,OAAO,MAAM,0BAA0B;AAC9C,OAAOC,WAAW,MAAM,yBAAyB;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,eAAe,QAAQ,4BAA4B;AAE5D,OAAOC,WAAW,MAAM,oCAAoC;;AAE5D;AAAA;AAAA;AACA,MAAMC,QAAQ,GAAG,MAAM;EAAA;EACrB;EACA,MAAM;IAAEC;EAAG,CAAC,GAAGT,SAAS,EAAE;EAE1B,MAAM;IAAEU;EAAW,CAAC,GAAGJ,eAAe,EAAE;EACxCK,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,UAAU,CAAC;EACrCC,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEH,EAAE,CAAC;EAEtB,MAAM;IACJI,QAAQ,EAAEC,cAAc;IACxBC,MAAM,EAAEC,YAAY;IACpBP,EAAE,EAAEQ;EACN,CAAC,GAAGP,UAAU;;EAEd;;EAEA;EACA,MAAM;IAAEQ,IAAI;IAAEC,OAAO;IAAEC,YAAY;IAAEC;EAAc,CAAC,GAAGjB,WAAW,CAACK,EAAE,CAAC;;EAEtE;EACA,MAAM;IACJa,IAAI;IACJC,KAAK;IACLR,MAAM;IACNF,QAAQ;IACRW,KAAK;IACLC,KAAK;IACLC,MAAM;IACNC,IAAI;IACJC,KAAK;IACLC,SAAS;IACTC,OAAO;IACPC,UAAU;IACVC;EACF,CAAC,GAAGd,IAAI;EACRP,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEkB,OAAO,EAAEZ,IAAI,CAAC;EAErC,oBACE;IAAA,wBACE;MAAA,UAAI;IAAS;MAAA;MAAA;MAAA;IAAA,QAAK,EAIjBE,YAAY,iBACX;MAAA,wBACE,QAAC,YAAY;QAAC,GAAG,EAAEA;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,eACnC,QAAC,IAAI;QAAC,EAAE,EAAC,GAAG;QAAA,UAAC;MAAe;QAAA;QAAA;QAAA;MAAA,QAAO;IAAA,gBAEtC,EACAD,OAAO,iBAAI,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG,EAGtBc,MAAM,CAACC,MAAM,CAAChB,IAAI,CAAC,CAACiB,MAAM,GAAG,CAAC,iBAC7B;MAAA,wBACE,QAAC,IAAI;QACH,EAAE,EAAE1B,EAAG;QACP,IAAI,EAAEa,IAAK;QACX,KAAK,EAAEC,KAAM;QACb,MAAM,EAAER,MAAO;QACf,QAAQ,EAAEF,QAAS;QACnB,KAAK,EAAEW,KAAM;QACb,KAAK,EAAEC,KAAM;QACb,MAAM,EAAEC,MAAO;QACf,IAAI,EAAEC,IAAK;QACX,KAAK,EAAEC,KAAM;QACb,OAAO,EAAEE,OAAQ;QACjB,SAAS,EAAED,SAAU;QACrB,UAAU,EAAEE,UAAW;QACvB,SAAS,EAAEC,SAAU;QACrB,aAAa,EAAEX;MAAc;QAAA;QAAA;QAAA;MAAA,QAC7B,eACF,QAAC,WAAW;QAAC,MAAM,EAAEZ,EAAG;QAAC,MAAM,EAAEQ;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA,gBAEhD;EAAA;IAAA;IAAA;IAAA;EAAA,QACO;AAEd,CAAC;AAAC,GA5EIT,QAAQ;EAAA,QAEGR,SAAS,EAEDM,eAAe,EAaiBF,WAAW;AAAA;AAAA,KAjB9DI,QAAQ;AA8Ed,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}