{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/context/PostsContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTokenContext } from \"../context/TokenContext\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostsContext = /*#__PURE__*/createContext();\nexport const CustomPostsContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [posts, setPosts] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const addVoteToPost = _ref2 => {\n    let {\n      id,\n      newAvg,\n      ratedByMe\n    } = _ref2;\n    const index = posts.findIndex(post => post.id === id);\n    posts[index].ratedByMe = ratedByMe;\n    posts[index].rate = newAvg;\n    setPosts([...posts]);\n  };\n  const navigate = useNavigate();\n  const {\n    token\n  } = useTokenContext();\n\n  // useEffect que se ejecuta después del primer render y cada vez que el token cambia\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        // Cuando empezamos a hacer el fetch, cambiamos el estado loading a true\n        setLoading(true);\n\n        // Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(`http://localhost:4000/posts?${searchParams.toString()}`, {\n          headers: token ? {\n            Authorization: token\n          } : {}\n        });\n\n        // Nos traemos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta no viene bien, lanzamos un error con el mensaje que viene de la API\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        // Cargamos los datos de los posts en el estado de posts\n        setPosts(body.data.posts);\n      } catch (error) {\n        // Si salta algún error, metemos el mensaje en el estado errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        // Al finalizar el fetch, cambiamos loading a false\n        setLoading(false);\n      }\n    };\n    fetchPosts();\n  }, [posts, setPosts, token, searchParams]);\n  return /*#__PURE__*/_jsxDEV(PostsContext.Provider, {\n    value: {\n      posts,\n      setPosts,\n      addVoteToPost,\n      loading,\n      errorMessage,\n      searchParams,\n      setSearchParams\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n/* export const useTokenContext = () => {\n  return useContext(PostsContext);\n};\n */\n_s(CustomPostsContextProvider, \"jmFJkagbRPNFM3gXQ6ayRPqF7zM=\", true, function () {\n  return [useNavigate, useTokenContext];\n});\n_c = CustomPostsContextProvider;\nvar _c;\n$RefreshReg$(_c, \"CustomPostsContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useNavigate","useTokenContext","useLocalStorage","PostsContext","CustomPostsContextProvider","children","posts","setPosts","errorMessage","setErrorMessage","loading","setLoading","searchParams","setSearchParams","useSearchParams","addVoteToPost","id","newAvg","ratedByMe","index","findIndex","post","rate","navigate","token","fetchPosts","res","fetch","toString","headers","Authorization","body","json","ok","Error","message","data","error"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/context/PostsContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useTokenContext } from \"../context/TokenContext\";\n\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nexport const PostsContext = createContext();\n\nexport const CustomPostsContextProvider = ({ children }) => {\n  const [posts, setPosts] = useState({});\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const addVoteToPost = ({ id, newAvg, ratedByMe }) => {\n    const index = posts.findIndex((post) => post.id === id);\n\n    posts[index].ratedByMe = ratedByMe;\n    posts[index].rate = newAvg;\n\n    setPosts([...posts]);\n  };\n\n  const navigate = useNavigate();\n\n  const { token } = useTokenContext();\n\n  // useEffect que se ejecuta después del primer render y cada vez que el token cambia\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        // Cuando empezamos a hacer el fetch, cambiamos el estado loading a true\n        setLoading(true);\n\n        // Hacemos el fetch y recogemos la respuesta del servidor\n        const res = await fetch(\n          `http://localhost:4000/posts?${searchParams.toString()}`,\n          {\n            headers: token ? { Authorization: token } : {},\n          }\n        );\n\n        // Nos traemos el body de la respuesta\n        const body = await res.json();\n\n        // Si la respuesta no viene bien, lanzamos un error con el mensaje que viene de la API\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        // Cargamos los datos de los posts en el estado de posts\n        setPosts(body.data.posts);\n      } catch (error) {\n        // Si salta algún error, metemos el mensaje en el estado errorMessage\n        setErrorMessage(error.message);\n      } finally {\n        // Al finalizar el fetch, cambiamos loading a false\n        setLoading(false);\n      }\n    };\n\n    fetchPosts();\n  }, [posts, setPosts, token, searchParams]);\n\n  return (\n    <PostsContext.Provider\n      value={{\n        posts,\n        setPosts,\n        addVoteToPost,\n        loading,\n        errorMessage,\n        searchParams,\n        setSearchParams,\n      }}\n    >\n      {children}\n    </PostsContext.Provider>\n  );\n};\n\n/* export const useTokenContext = () => {\n  return useContext(PostsContext);\n};\n */\n"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,eAAe,QAAQ,yBAAyB;AAEzD,OAAOC,eAAe,MAAM,0BAA0B;AAAC;AAEvD,OAAO,MAAMC,YAAY,gBAAGP,aAAa,EAAE;AAE3C,OAAO,MAAMQ,0BAA0B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACrD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtC,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGC,eAAe,EAAE;EAEzD,MAAMC,aAAa,GAAG,SAA+B;IAAA,IAA9B;MAAEC,EAAE;MAAEC,MAAM;MAAEC;IAAU,CAAC;IAC9C,MAAMC,KAAK,GAAGb,KAAK,CAACc,SAAS,CAAEC,IAAI,IAAKA,IAAI,CAACL,EAAE,KAAKA,EAAE,CAAC;IAEvDV,KAAK,CAACa,KAAK,CAAC,CAACD,SAAS,GAAGA,SAAS;IAClCZ,KAAK,CAACa,KAAK,CAAC,CAACG,IAAI,GAAGL,MAAM;IAE1BV,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAAC,CAAC;EACtB,CAAC;EAED,MAAMiB,QAAQ,GAAGvB,WAAW,EAAE;EAE9B,MAAM;IAAEwB;EAAM,CAAC,GAAGvB,eAAe,EAAE;;EAEnC;EACAH,SAAS,CAAC,MAAM;IACd,MAAM2B,UAAU,GAAG,YAAY;MAC7B,IAAI;QACF;QACAd,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMe,GAAG,GAAG,MAAMC,KAAK,CACpB,+BAA8Bf,YAAY,CAACgB,QAAQ,EAAG,EAAC,EACxD;UACEC,OAAO,EAAEL,KAAK,GAAG;YAAEM,aAAa,EAAEN;UAAM,CAAC,GAAG,CAAC;QAC/C,CAAC,CACF;;QAED;QACA,MAAMO,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;;QAE7B;QACA,IAAI,CAACN,GAAG,CAACO,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,CAAC;QAC/B;;QAEA;QACA5B,QAAQ,CAACwB,IAAI,CAACK,IAAI,CAAC9B,KAAK,CAAC;MAC3B,CAAC,CAAC,OAAO+B,KAAK,EAAE;QACd;QACA5B,eAAe,CAAC4B,KAAK,CAACF,OAAO,CAAC;MAChC,CAAC,SAAS;QACR;QACAxB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDc,UAAU,EAAE;EACd,CAAC,EAAE,CAACnB,KAAK,EAAEC,QAAQ,EAAEiB,KAAK,EAAEZ,YAAY,CAAC,CAAC;EAE1C,oBACE,QAAC,YAAY,CAAC,QAAQ;IACpB,KAAK,EAAE;MACLN,KAAK;MACLC,QAAQ;MACRQ,aAAa;MACbL,OAAO;MACPF,YAAY;MACZI,YAAY;MACZC;IACF,CAAE;IAAA,UAEDR;EAAQ;IAAA;IAAA;IAAA;EAAA,QACa;AAE5B,CAAC;;AAED;AACA;AACA;AACA;AAHA,GAzEaD,0BAA0B;EAAA,QAepBJ,WAAW,EAEVC,eAAe;AAAA;AAAA,KAjBtBG,0BAA0B;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}