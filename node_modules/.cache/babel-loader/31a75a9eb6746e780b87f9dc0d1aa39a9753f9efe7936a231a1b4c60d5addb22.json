{"ast":null,"code":"var _jsxFileName = \"/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/context/TokenContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TokenContext = /*#__PURE__*/createContext();\nexport const CustomTokenContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [token, setToken] = useLocalStorage(\"token\", \"\");\n  const [loggedUser, setLoggedUser] = useState({});\n\n  // const navigate = useNavigate();\n\n  // useEffect que se ejecuta después del primer render y cada vez que el token cambia\n  useEffect(() => {\n    // Si el token no existe, cambiamos loggedUser a un objeto vacío y cortamos la función\n    if (!token) {\n      setLoggedUser({});\n      return;\n    }\n\n    // Si el token existe, recogemos la información del usuario de la API y metemos los datos en el estado loggedUser\n    const fetchUserProfile = async () => {\n      try {\n        const tokenEncryptedPayload = token.split(\".\")[1];\n        const tokenPayload = JSON.parse(atob(tokenEncryptedPayload));\n        const res = await fetch(`http://localhost:4000/users/${tokenPayload.id}`, {\n          headers: {\n            Authorization: token\n          }\n        });\n        const body = await res.json();\n        console.log(body);\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n        setLoggedUser({\n          ...body.data.user,\n          id: tokenPayload.id\n        });\n      } catch (error) {\n        // Si hay algún error cargando los datos del usuario logueado (por ejemplo, porque el token caducó) le lanzamos una alerta de que hubo un error al iniciar sesión, lo deslogueamos y lo redirigimos a login\n        console.error(error);\n        // toast.error(\"Hubo un error en el login. Porfavor, inténtalo de nuevo\");\n        setToken(\"\");\n        // navigate(\"/login\");\n      }\n    };\n\n    fetchUserProfile();\n  }, [token, setToken]);\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: {\n      token,\n      setToken,\n      loggedUser,\n      setLoggedUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomTokenContextProvider, \"FVFMGzkT0beHqNdEXbkRu1vuoIg=\", false, function () {\n  return [useLocalStorage];\n});\n_c = CustomTokenContextProvider;\nexport const useTokenContext = () => {\n  _s2();\n  return useContext(TokenContext);\n};\n_s2(useTokenContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CustomTokenContextProvider\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","useLocalStorage","TokenContext","CustomTokenContextProvider","children","token","setToken","loggedUser","setLoggedUser","fetchUserProfile","tokenEncryptedPayload","split","tokenPayload","JSON","parse","atob","res","fetch","id","headers","Authorization","body","json","console","log","ok","Error","message","data","user","error","useTokenContext"],"sources":["/home/miruto20/Documents/Proyectos/instagram.Proy.Beta.Front/front.instagram/src/context/TokenContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useState } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\nexport const TokenContext = createContext();\n\nexport const CustomTokenContextProvider = ({ children }) => {\n  const [token, setToken] = useLocalStorage(\"token\", \"\");\n  const [loggedUser, setLoggedUser] = useState({});\n\n  // const navigate = useNavigate();\n\n  // useEffect que se ejecuta después del primer render y cada vez que el token cambia\n  useEffect(() => {\n    // Si el token no existe, cambiamos loggedUser a un objeto vacío y cortamos la función\n    if (!token) {\n      setLoggedUser({});\n      return;\n    }\n\n    // Si el token existe, recogemos la información del usuario de la API y metemos los datos en el estado loggedUser\n    const fetchUserProfile = async () => {\n      try {\n        const tokenEncryptedPayload = token.split(\".\")[1];\n\n        const tokenPayload = JSON.parse(atob(tokenEncryptedPayload));\n\n        const res = await fetch(\n          `http://localhost:4000/users/${tokenPayload.id}`,\n          {\n            headers: { Authorization: token },\n          }\n        );\n\n        const body = await res.json();\n        console.log(body);\n\n        if (!res.ok) {\n          throw new Error(body.message);\n        }\n\n        setLoggedUser({ ...body.data.user, id: tokenPayload.id });\n      } catch (error) {\n        // Si hay algún error cargando los datos del usuario logueado (por ejemplo, porque el token caducó) le lanzamos una alerta de que hubo un error al iniciar sesión, lo deslogueamos y lo redirigimos a login\n        console.error(error);\n        // toast.error(\"Hubo un error en el login. Porfavor, inténtalo de nuevo\");\n        setToken(\"\");\n        // navigate(\"/login\");\n      }\n    };\n\n    fetchUserProfile();\n  }, [token, setToken]);\n\n  return (\n    <TokenContext.Provider\n      value={{ token, setToken, loggedUser, setLoggedUser }}\n    >\n      {children}\n    </TokenContext.Provider>\n  );\n};\n\nexport const useTokenContext = () => {\n  return useContext(TokenContext);\n};\n"],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACtE;;AAEA,OAAOC,eAAe,MAAM,0BAA0B;AAAC;AAEvD,OAAO,MAAMC,YAAY,gBAAGL,aAAa,EAAE;AAE3C,OAAO,MAAMM,0BAA0B,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACrD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,eAAe,CAAC,OAAO,EAAE,EAAE,CAAC;EACtD,MAAM,CAACM,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhD;;EAEA;EACAD,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACM,KAAK,EAAE;MACVG,aAAa,CAAC,CAAC,CAAC,CAAC;MACjB;IACF;;IAEA;IACA,MAAMC,gBAAgB,GAAG,YAAY;MACnC,IAAI;QACF,MAAMC,qBAAqB,GAAGL,KAAK,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEjD,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,qBAAqB,CAAC,CAAC;QAE5D,MAAMM,GAAG,GAAG,MAAMC,KAAK,CACpB,+BAA8BL,YAAY,CAACM,EAAG,EAAC,EAChD;UACEC,OAAO,EAAE;YAAEC,aAAa,EAAEf;UAAM;QAClC,CAAC,CACF;QAED,MAAMgB,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,EAAE;QAC7BC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QAEjB,IAAI,CAACL,GAAG,CAACS,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAACL,IAAI,CAACM,OAAO,CAAC;QAC/B;QAEAnB,aAAa,CAAC;UAAE,GAAGa,IAAI,CAACO,IAAI,CAACC,IAAI;UAAEX,EAAE,EAAEN,YAAY,CAACM;QAAG,CAAC,CAAC;MAC3D,CAAC,CAAC,OAAOY,KAAK,EAAE;QACd;QACAP,OAAO,CAACO,KAAK,CAACA,KAAK,CAAC;QACpB;QACAxB,QAAQ,CAAC,EAAE,CAAC;QACZ;MACF;IACF,CAAC;;IAEDG,gBAAgB,EAAE;EACpB,CAAC,EAAE,CAACJ,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAErB,oBACE,QAAC,YAAY,CAAC,QAAQ;IACpB,KAAK,EAAE;MAAED,KAAK;MAAEC,QAAQ;MAAEC,UAAU;MAAEC;IAAc,CAAE;IAAA,UAErDJ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACa;AAE5B,CAAC;AAAC,GAvDWD,0BAA0B;EAAA,QACXF,eAAe;AAAA;AAAA,KAD9BE,0BAA0B;AAyDvC,OAAO,MAAM4B,eAAe,GAAG,MAAM;EAAA;EACnC,OAAOjC,UAAU,CAACI,YAAY,CAAC;AACjC,CAAC;AAAC,IAFW6B,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}